"use strict";

(function () {
  var octokit = new Octokit();

  var buildReposBlock = function buildReposBlock(formattedResult) {
    var temp = document.querySelector(".template__repo");
    var gitBlock = document.querySelector('.git-content');
    var gitRepoName = temp.content.querySelector('.repository__name');
    var gitRepoDescription = temp.content.querySelector('.repository__description');
    var gitRepoLink = temp.content.querySelector('.repository__link');
    var gitRepoUpdateTime = temp.content.querySelector('.repository__time');
    var gitRepoLang = temp.content.querySelector('.repository__language');
    var miniLoader = document.querySelector('#mini-loader');
    var gitRepoLangColor = temp.content.querySelector('.language__color');
    miniLoader.style.display = 'none';
    var resLength = formattedResult.length;

    for (var i = 0; i < resLength; i++) {
      gitRepoLink.setAttribute('href', formattedResult[i].html_url);
      gitRepoName.textContent = formattedResult[i].name;
      gitRepoDescription.textContent = formattedResult[i].description;
      gitRepoLang.textContent = formattedResult[i].language !== null ? formattedResult[i].language : 'HTML';

      switch (gitRepoLang.textContent) {
        case 'HTML':
          gitRepoLangColor.style.backgroundColor = '#E00000';
          break;

        case 'CSS':
          gitRepoLangColor.style.backgroundColor = '#0094FF';
          break;

        case 'JavaScript':
          gitRepoLangColor.style.backgroundColor = '#FFC700';
          break;

        default:
          gitRepoLangColor.style.backgroundColor = '#83838E';
      }

      var updateTime = formattedResult[i].updated_at;
      var updateTimeUTC = new Date(Date.parse("".concat(updateTime)));
      gitRepoUpdateTime.textContent = updateTimeUTC.toString().slice(4, 25);
      var clone = document.importNode(temp.content, true);
      gitBlock.appendChild(clone);
    }
  }; //pagination click handle


  var pageClicker = function pageClicker(evt) {
    evt.preventDefault();
    var repositoryBlock = document.body.querySelectorAll('.repository');
    var paginationBlock = document.querySelector('.pagination');
    repositoryBlock.forEach(function (el) {
      return el.remove();
    });
    var miniLoader = document.querySelector('#mini-loader');
    miniLoader.style.display = 'block';
    var active = Number(document.querySelector('.active').text);

    if (active === 5 && evt.target.innerText === '»' || active === 1 && evt.target.innerText === '«') {
      makeRequest(active);
    } else if (evt.target.innerText === '»') {
      paginationBlock.children[active].classList.remove('active');
      paginationBlock.children[++active].classList.add('active');
      makeRequest(active);
    } else if (evt.target.innerText === '«') {
      paginationBlock.children[active].classList.remove('active');
      paginationBlock.children[--active].classList.add('active');
      makeRequest(active);
    } else {
      paginationBlock.children[active].classList.remove('active');
      evt.target.classList.add('active');
      active = Number(document.querySelector('.active').text);
      makeRequest(active);
    }
  };

  var parseData = function parseData(pageInfo) {
    var parsedData = {};
    var arrData = pageInfo.split(",");
    var tempPage = document.querySelector(".template__pagination");
    var clone = document.importNode(tempPage.content, true);
    var gitBlock = document.querySelector('.git-content');
    var item;
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = arrData[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        item = _step.value;
        var linkInfo = /<([^>]+)>;\s+rel="([^"]+)"/ig.exec(item);
        parsedData[linkInfo[2]] = linkInfo[1];
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    gitBlock.appendChild(clone);
    document.body.querySelector('.pagination').addEventListener('click', pageClicker);
  }; //error-handling block


  var errDrawer = function errDrawer(err) {
    var gitContent = document.querySelector('.git-content');
    var errBlock = document.createElement('h1');
    var gitLink = document.createElement('a');
    errBlock.classList.add('repository__description');
    errBlock.innerText = "Извините, сейчас не удалось получить список репозиториев. Посмотреть их можно по ссылке:";
    gitLink.classList.add('repository__link');
    gitLink.innerText = "страница на GitHub";
    gitLink.href = "https://github.com/ashmee?tab=repositories";
    gitContent.appendChild(errBlock);
    gitContent.appendChild(gitLink);
    gitContent.style.background = "url(./images/err.png) no-repeat bottom left";
    console.error(err);
  };

  var makeRequest = function makeRequest(page, pagination) {
    octokit.request('GET /users/:username/repos', {
      username: 'ashmee',
      type: 'private',
      page: page,
      per_page: 3,
      sort: 'updated'
    }).then(function (result) {
      var formattedResult = [];
      var pageInfo = result.headers.link;
      result.data.map(function (item) {
        var name = item.name,
            html_url = item.html_url,
            description = item.description,
            language = item.language,
            updated_at = item.updated_at;
        formattedResult.push({
          name: name,
          html_url: html_url,
          description: description,
          language: language,
          updated_at: updated_at
        });
      });
      buildReposBlock(formattedResult);

      if (pagination) {
        parseData(pageInfo);
      }
    }).catch(function (err) {
      return errDrawer(err);
    });
  };

  window.onscroll = function () {
    var sideMenuButton = document.querySelector('.side-menu');
    var sideArrow = document.querySelector('.side-arrow');
    var currentCoord = window.pageYOffset;
    var sideMenu = document.getElementById('mySidenav');

    if ((sideMenu.style.width === "250px" || currentCoord > 200) && window.innerWidth > 900) {
      sideMenuButton.style.display = "flex";
      sideArrow.style.display = "block";
    } else {
      sideMenuButton.style.display = "none";
      sideArrow.style.display = "none";
    }
  };

  makeRequest(1, true);
})();

var menuClickHandler = function menuClickHandler() {
  var sideMenu = document.getElementById('mySidenav');
  var sideMenuButton = document.querySelector('.side-menu');

  if (sideMenu.style.width === "250px") {
    sideMenuButton.setAttribute('class', 'side-menu');
    sideMenu.style.width = "0px";
    closeMenuOnEscape();
  } else {
    sideMenuButton.style.display = "flex";
    sideMenuButton.setAttribute('class', 'side-menu opened');
    sideMenu.style.width = "250px";
    document.body.addEventListener('keydown', closeMenuOnEscape);
  }
};

var menuMobileClickHandler = function menuMobileClickHandler() {
  var mobileMenu = document.getElementById('mobileMenu');
  var mobileMenuButton = document.querySelector('.mobile-menu');

  if (mobileMenu.style.width === "100vw") {
    mobileMenuButton.setAttribute('class', 'mobile-menu');
    mobileMenu.style.width = "0px";
    mobileMenu.style.height = "0px";
    mobileMenu.style.display = "none";
  } else {
    mobileMenu.style.display = "flex";
    mobileMenuButton.setAttribute('class', 'mobile-menu opened');
    mobileMenu.style.width = "100vw";
    mobileMenu.style.height = "100vh"; //document.body.addEventListener('keydown', closeMenuOnEscape);
  }
};

var closeMenuOnEscape = function closeMenuOnEscape() {
  var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'click';

  if (event.code === 'Escape' || event === 'click') {
    document.getElementById('mySidenav').style.width = "0px";
    document.body.removeEventListener('keydown', closeMenuOnEscape);
  }
};
"use strict";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var Octokit = function (e) {
  var r = {};

  function t(i) {
    if (r[i]) return r[i].exports;
    var n = r[i] = {
      i: i,
      l: !1,
      exports: {}
    };
    return e[i].call(n.exports, n, n.exports, t), n.l = !0, n.exports;
  }

  return t.m = e, t.c = r, t.d = function (e, r, i) {
    t.o(e, r) || Object.defineProperty(e, r, {
      enumerable: !0,
      get: i
    });
  }, t.r = function (e) {
    "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
      value: "Module"
    }), Object.defineProperty(e, "__esModule", {
      value: !0
    });
  }, t.t = function (e, r) {
    if (1 & r && (e = t(e)), 8 & r) return e;
    if (4 & r && "object" == _typeof(e) && e && e.__esModule) return e;
    var i = Object.create(null);
    if (t.r(i), Object.defineProperty(i, "default", {
      enumerable: !0,
      value: e
    }), 2 & r && "string" != typeof e) for (var n in e) {
      t.d(i, n, function (r) {
        return e[r];
      }.bind(null, n));
    }
    return i;
  }, t.n = function (e) {
    var r = e && e.__esModule ? function () {
      return e.default;
    } : function () {
      return e;
    };
    return t.d(r, "a", r), r;
  }, t.o = function (e, r) {
    return Object.prototype.hasOwnProperty.call(e, r);
  }, t.p = "", t(t.s = 15);
}([function (e, r) {
  e.exports = e.exports.Deprecation =
  /*#__PURE__*/
  function (_Error) {
    _inherits(_class, _Error);

    function _class(e) {
      var _this;

      _classCallCheck(this, _class);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(_class).call(this, e)), Error.captureStackTrace && Error.captureStackTrace(_assertThisInitialized(_assertThisInitialized(_this)), _this.constructor), _this.name = "Deprecation";
      return _this;
    }

    return _class;
  }(_wrapNativeSuper(Error));
}, function (e, r, t) {
  var i = t(0),
      n = t(2)(function (e) {
    return console.warn(e);
  });

  e.exports =
  /*#__PURE__*/
  function (_Error2) {
    _inherits(_class2, _Error2);

    function _class2(e, r, t, s) {
      var _this2;

      _classCallCheck(this, _class2);

      _this2 = _possibleConstructorReturn(this, _getPrototypeOf(_class2).call(this, e)), Error.captureStackTrace && Error.captureStackTrace(_assertThisInitialized(_assertThisInitialized(_this2)), _this2.constructor), _this2.name = "HttpError", _this2.status = r, Object.defineProperty(_assertThisInitialized(_assertThisInitialized(_this2)), "code", {
        get: function get() {
          return n(new i("[@octokit/request] `error.code` is deprecated, use `error.status`.")), r;
        }
      }), _this2.headers = t;
      var o = Object.assign({}, s);
      s.headers.authorization && (o.headers = Object.assign({}, s.headers, {
        authorization: s.headers.authorization.replace(/ .*$/, " [REDACTED]")
      })), o.url = o.url.replace(/\bclient_secret=\w+/g, "client_secret=[REDACTED]"), _this2.request = o;
      return _this2;
    }

    return _class2;
  }(_wrapNativeSuper(Error));
}, function (e, r, t) {
  var i = t(35);

  function n(e) {
    var r = function r() {
      return r.called ? r.value : (r.called = !0, r.value = e.apply(this, arguments));
    };

    return r.called = !1, r;
  }

  function s(e) {
    var r = function r() {
      if (r.called) throw new Error(r.onceError);
      return r.called = !0, r.value = e.apply(this, arguments);
    },
        t = e.name || "Function wrapped with `once`";

    return r.onceError = t + " shouldn't be called more than once", r.called = !1, r;
  }

  e.exports = i(n), e.exports.strict = i(s), n.proto = n(function () {
    Object.defineProperty(Function.prototype, "once", {
      value: function value() {
        return n(this);
      },
      configurable: !0
    }), Object.defineProperty(Function.prototype, "onceStrict", {
      value: function value() {
        return s(this);
      },
      configurable: !0
    });
  });
}, function (e, r) {
  e.exports = function (e) {
    if (t[e]) return;
    console.warn("DEPRECATED (@octokit/rest): ".concat(e)), t[e] = 1;
  };

  var t = {};
}, function (e, r) {
  e.exports = function (e) {
    e = e.link || e.headers.link || "";
    var r = {};
    return e.replace(/<([^>]*)>;\s*rel="([\w]*)"/g, function (e, t, i) {
      r[i] = t;
    }), r;
  };
}, function (e, r, t) {
  e.exports = function (e, r, t, p) {
    i("octokit.get".concat(t.charAt(0).toUpperCase() + t.slice(1), "Page() \u2013 You can use octokit.paginate or async iterators instead: https://github.com/octokit/rest.js#pagination."));
    var a = n(r)[t];

    if (!a) {
      var _e = new s("No ".concat(t, " page found"), 404);

      return Promise.reject(_e);
    }

    var u = {
      url: a,
      headers: o(r, p)
    };
    return e.request(u);
  };

  var i = t(3),
      n = t(4),
      s = t(69);

  function o(e, r) {
    var t = e.headers && e.headers["x-github-media-type"];
    return !t || r && r.accept ? r : ((r = r || {}).accept = "application/vnd." + t.replace("; param=", ".").replace("; format=", "+"), r);
  }
}, function (e, r) {
  e.exports = function () {
    return navigator.userAgent;
  };
}, function (e, r) {
  var t;

  t = function () {
    return this;
  }();

  try {
    t = t || new Function("return this")();
  } catch (e) {
    "object" == (typeof window === "undefined" ? "undefined" : _typeof(window)) && (t = window);
  }

  e.exports = t;
}, function (e, r, t) {
  e.exports = function (e) {
    var r = i.bind(null, e || []);
    return r.plugin = n.bind(null, e || []), r;
  };

  var i = t(17),
      n = t(43);
}, function (e, r, t) {
  e.exports = function (e, r, t) {
    if ("string" == typeof r) {
      var _r$split = r.split(" "),
          _r$split2 = _slicedToArray(_r$split, 2),
          _e2 = _r$split2[0],
          _i = _r$split2[1];

      t = Object.assign(_i ? {
        method: _e2,
        url: _i
      } : {
        url: _e2
      }, t);
    } else t = r || {};

    t.headers = s(t.headers), t = i.all([e, t].filter(Boolean), {
      isMergeableObject: n
    }), e && e.mediaType.previews.length && (t.mediaType.previews = e.mediaType.previews.filter(function (e) {
      return !t.mediaType.previews.includes(e);
    }).concat(t.mediaType.previews));
    return t.mediaType.previews = t.mediaType.previews.map(function (e) {
      return e.replace(/-preview/, "");
    }), t;
  };

  var i = t(22),
      n = t(10),
      s = t(24);
}, function (e, r, t) {
  "use strict";
  /*!
   * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
   *
   * Copyright (c) 2014-2017, Jon Schlinkert.
   * Released under the MIT License.
   */

  var i = t(23);

  function n(e) {
    return !0 === i(e) && "[object Object]" === Object.prototype.toString.call(e);
  }

  e.exports = function (e) {
    var r, t;
    return !1 !== n(e) && "function" == typeof (r = e.constructor) && !1 !== n(t = r.prototype) && !1 !== t.hasOwnProperty("isPrototypeOf");
  };
}, function (e, r, t) {
  e.exports = function (e) {
    var r,
        t = e.method.toUpperCase(),
        p = e.url.replace(/:([a-z]\w+)/g, "{+$1}"),
        a = Object.assign({}, e.headers),
        u = o(e, ["method", "baseUrl", "url", "headers", "request", "mediaType"]);
    var d = s(p);
    p = i.parse(p).expand(u), /^http/.test(p) || (p = e.baseUrl + p);
    var g = Object.keys(e).filter(function (e) {
      return d.includes(e);
    }).concat("baseUrl"),
        c = o(u, g);
    e.mediaType.format && (a.accept = a.accept.split(/,/).map(function (r) {
      return r.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/, "application/vnd$1$2.".concat(e.mediaType.format));
    }).join(","));

    if (e.mediaType.previews.length) {
      var _r = a.accept.match(/[\w-]+(?=-preview)/g) || [];

      a.accept = _r.concat(e.mediaType.previews).map(function (r) {
        var t = e.mediaType.format ? ".".concat(e.mediaType.format) : "+json";
        return "application/vnd.github.".concat(r, "-preview").concat(t);
      }).join(",");
    }

    ["GET", "HEAD"].includes(t) ? p = n(p, c) : "data" in c ? r = c.data : Object.keys(c).length ? r = c : a["content-length"] = 0;
    a["content-type"] || void 0 === r || (a["content-type"] = "application/json; charset=utf-8");
    ["PATCH", "PUT"].includes(t) && void 0 === r && (r = "");
    return Object.assign({
      method: t,
      url: p,
      headers: a
    }, void 0 !== r ? {
      body: r
    } : null, e.request ? {
      request: e.request
    } : null);
  };

  var i = t(25),
      n = t(26),
      s = t(27),
      o = t(28);
}, function (e, r, t) {
  e.exports = function (e) {
    (i(e.body) || Array.isArray(e.body)) && (e.body = JSON.stringify(e.body));
    var r,
        t,
        p = {};
    return (e.request && e.request.fetch || n)(e.url, Object.assign({
      method: e.method,
      body: e.body,
      headers: e.headers,
      redirect: e.redirect
    }, e.request)).then(function (i) {
      t = i.url, r = i.status;
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = i.headers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _e3 = _step.value;
          p[_e3[0]] = _e3[1];
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      if (204 === r || 205 === r) return;

      if ("HEAD" === e.method) {
        if (r < 400) return;
        throw new o(i.statusText, r, p, e);
      }

      if (304 === r) throw new o("Not modified", r, p, e);
      if (r >= 400) return i.text().then(function (t) {
        var i = new o(t, r, p, e);

        try {
          Object.assign(i, JSON.parse(i.message));
        } catch (e) {}

        throw i;
      });
      var n = i.headers.get("content-type");
      return /application\/json/.test(n) ? i.json() : !n || /^text\/|charset=utf-8$/.test(n) ? i.text() : s(i);
    }).then(function (e) {
      return {
        status: r,
        url: t,
        headers: p,
        data: e
      };
    }).catch(function (r) {
      if (r instanceof o) throw r;
      throw new o(r.message, 500, p, e);
    });
  };

  var i = t(10),
      n = t(33).default,
      s = t(34),
      o = t(1);
}, function (e, r) {
  e.exports = function (e) {
    return btoa(e);
  };
}, function (e, r) {
  e.exports = function (e, r) {
    var t = r.headers;
    var i = e.request.endpoint(r).url;
    return _defineProperty({}, Symbol.asyncIterator, function () {
      return {
        next: function next() {
          return i ? e.request({
            url: i,
            headers: t
          }).then(function (e) {
            return i = ((e.headers.link || "").match(/<([^>]+)>;\s*rel="next"/) || [])[1], {
              value: e
            };
          }) : Promise.resolve({
            done: !0
          });
        }
      };
    });
  };
}, function (e, r, t) {
  var i = t(16),
      n = [t(44), t(45), t(50), t(56), t(58), t(59), t(61), t(63), t(67)];
  e.exports = i.plugin(n);
}, function (e, r, t) {
  var i = t(8);
  e.exports = i();
}, function (e, r, t) {
  e.exports = function (e, r) {
    r = r || {};
    var t = new n.Collection(),
        p = Object.assign({
      debug: function debug() {},
      info: function info() {},
      warn: console.warn,
      error: console.error
    }, r && r.log),
        a = {
      hook: t,
      log: p,
      request: o(t, i, s(r, p))
    };
    return e.forEach(function (e) {
      return e(a, r);
    }), a;
  };

  var i = t(18).endpoint,
      n = t(36),
      s = t(40),
      o = t(42);
}, function (e, r, t) {
  var i = t(19),
      n = t(6),
      s = "octokit-request.js/".concat(t(31).version, " ").concat(n()),
      o = t(32);
  e.exports = o(i, {
    headers: {
      "user-agent": s
    }
  });
}, function (e, r, t) {
  var i = t(20),
      n = t(29);
  e.exports = i(null, n);
}, function (e, r, t) {
  e.exports = function e(r, t) {
    var o = n(r, t);
    return Object.assign(i.bind(null, o), {
      DEFAULTS: o,
      defaults: e.bind(null, o),
      merge: n.bind(null, o),
      parse: s
    });
  };

  var i = t(21),
      n = t(9),
      s = t(11);
}, function (e, r, t) {
  e.exports = function (e, r, t) {
    return n(i(e, r, t));
  };

  var i = t(9),
      n = t(11);
}, function (e, r, t) {
  e.exports = function () {
    "use strict";

    var e = function e(_e4) {
      return function (e) {
        return !!e && "object" == _typeof(e);
      }(_e4) && !function (e) {
        var t = Object.prototype.toString.call(e);
        return "[object RegExp]" === t || "[object Date]" === t || function (e) {
          return e.$$typeof === r;
        }(e);
      }(_e4);
    },
        r = "function" == typeof Symbol && Symbol.for ? Symbol.for("react.element") : 60103;

    function t(e, r) {
      return !1 !== r.clone && r.isMergeableObject(e) ? s((t = e, Array.isArray(t) ? [] : {}), e, r) : e;
      var t;
    }

    function i(e, r, i) {
      return e.concat(r).map(function (e) {
        return t(e, i);
      });
    }

    function n(e, r, i) {
      var n = {};
      return i.isMergeableObject(e) && Object.keys(e).forEach(function (r) {
        n[r] = t(e[r], i);
      }), Object.keys(r).forEach(function (o) {
        i.isMergeableObject(r[o]) && e[o] ? n[o] = function (e, r) {
          if (!r.customMerge) return s;
          var t = r.customMerge(e);
          return "function" == typeof t ? t : s;
        }(o, i)(e[o], r[o], i) : n[o] = t(r[o], i);
      }), n;
    }

    function s(r, s, o) {
      (o = o || {}).arrayMerge = o.arrayMerge || i, o.isMergeableObject = o.isMergeableObject || e;
      var p = Array.isArray(s),
          a = Array.isArray(r),
          u = p === a;
      return u ? p ? o.arrayMerge(r, s, o) : n(r, s, o) : t(s, o);
    }

    return s.all = function (e, r) {
      if (!Array.isArray(e)) throw new Error("first argument should be an array");
      return e.reduce(function (e, t) {
        return s(e, t, r);
      }, {});
    }, s;
  }();
}, function (e, r, t) {
  "use strict";
  /*!
   * isobject <https://github.com/jonschlinkert/isobject>
   *
   * Copyright (c) 2014-2017, Jon Schlinkert.
   * Released under the MIT License.
   */

  e.exports = function (e) {
    return null != e && "object" == _typeof(e) && !1 === Array.isArray(e);
  };
}, function (e, r) {
  e.exports = function (e) {
    if (!e) return {};
    return Object.keys(e).reduce(function (r, t) {
      return r[t.toLowerCase()] = e[t], r;
    }, {});
  };
}, function (e, r, t) {
  e.exports = function () {
    function e() {}

    return e.prototype.encodeReserved = function (e) {
      return e.split(/(%[0-9A-Fa-f]{2})/g).map(function (e) {
        return /%[0-9A-Fa-f]/.test(e) || (e = encodeURI(e).replace(/%5B/g, "[").replace(/%5D/g, "]")), e;
      }).join("");
    }, e.prototype.encodeUnreserved = function (e) {
      return encodeURIComponent(e).replace(/[!'()*]/g, function (e) {
        return "%" + e.charCodeAt(0).toString(16).toUpperCase();
      });
    }, e.prototype.encodeValue = function (e, r, t) {
      return r = "+" === e || "#" === e ? this.encodeReserved(r) : this.encodeUnreserved(r), t ? this.encodeUnreserved(t) + "=" + r : r;
    }, e.prototype.isDefined = function (e) {
      return null != e;
    }, e.prototype.isKeyOperator = function (e) {
      return ";" === e || "&" === e || "?" === e;
    }, e.prototype.getValues = function (e, r, t, i) {
      var n = e[t],
          s = [];
      if (this.isDefined(n) && "" !== n) {
        if ("string" == typeof n || "number" == typeof n || "boolean" == typeof n) n = n.toString(), i && "*" !== i && (n = n.substring(0, parseInt(i, 10))), s.push(this.encodeValue(r, n, this.isKeyOperator(r) ? t : null));else if ("*" === i) Array.isArray(n) ? n.filter(this.isDefined).forEach(function (e) {
          s.push(this.encodeValue(r, e, this.isKeyOperator(r) ? t : null));
        }, this) : Object.keys(n).forEach(function (e) {
          this.isDefined(n[e]) && s.push(this.encodeValue(r, n[e], e));
        }, this);else {
          var o = [];
          Array.isArray(n) ? n.filter(this.isDefined).forEach(function (e) {
            o.push(this.encodeValue(r, e));
          }, this) : Object.keys(n).forEach(function (e) {
            this.isDefined(n[e]) && (o.push(this.encodeUnreserved(e)), o.push(this.encodeValue(r, n[e].toString())));
          }, this), this.isKeyOperator(r) ? s.push(this.encodeUnreserved(t) + "=" + o.join(",")) : 0 !== o.length && s.push(o.join(","));
        }
      } else ";" === r ? this.isDefined(n) && s.push(this.encodeUnreserved(t)) : "" !== n || "&" !== r && "?" !== r ? "" === n && s.push("") : s.push(this.encodeUnreserved(t) + "=");
      return s;
    }, e.prototype.parse = function (e) {
      var r = this,
          t = ["+", "#", ".", "/", ";", "?", "&"];
      return {
        expand: function expand(i) {
          return e.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g, function (e, n, s) {
            if (n) {
              var o = null,
                  p = [];

              if (-1 !== t.indexOf(n.charAt(0)) && (o = n.charAt(0), n = n.substr(1)), n.split(/,/g).forEach(function (e) {
                var t = /([^:\*]*)(?::(\d+)|(\*))?/.exec(e);
                p.push.apply(p, r.getValues(i, o, t[1], t[2] || t[3]));
              }), o && "+" !== o) {
                var a = ",";
                return "?" === o ? a = "&" : "#" !== o && (a = o), (0 !== p.length ? o : "") + p.join(a);
              }

              return p.join(",");
            }

            return r.encodeReserved(s);
          });
        }
      };
    }, new e();
  }();
}, function (e, r) {
  e.exports = function (e, r) {
    var t = /\?/.test(e) ? "&" : "?",
        i = Object.keys(r);
    if (0 === i.length) return e;
    return e + t + i.map(function (e) {
      return "q" === e ? "q=" + r.q.split("+").map(encodeURIComponent).join("+") : "".concat(e, "=").concat(encodeURIComponent(r[e]));
    }).join("&");
  };
}, function (e, r) {
  e.exports = function (e) {
    var r = e.match(t);
    if (!r) return [];
    return r.map(i).reduce(function (e, r) {
      return e.concat(r);
    }, []);
  };

  var t = /\{[^}]+\}/g;

  function i(e) {
    return e.replace(/^\W+|\W+$/g, "").split(/,/);
  }
}, function (e, r) {
  e.exports = function (e, r) {
    return Object.keys(e).filter(function (e) {
      return !r.includes(e);
    }).reduce(function (r, t) {
      return r[t] = e[t], r;
    }, {});
  };
}, function (e, r, t) {
  var i = t(6),
      n = "octokit-endpoint.js/".concat(t(30).version, " ").concat(i());
  e.exports = {
    method: "GET",
    baseUrl: "https://api.github.com",
    headers: {
      accept: "application/vnd.github.v3+json",
      "user-agent": n
    },
    mediaType: {
      format: "",
      previews: []
    }
  };
}, function (e) {
  e.exports = {
    name: "@octokit/endpoint",
    version: "3.2.3",
    publishConfig: {
      access: "public",
      tag: "latest"
    },
    description: "Turns REST API endpoints into generic request options",
    main: "index.js",
    directories: {
      test: "test"
    },
    scripts: {
      prebuild: "mkdirp dist/",
      build: "npm-run-all build:*",
      "build:development": "webpack --mode development --entry . --output-library=octokitEndpoint --output=./dist/octokit-endpoint.js --profile --json > dist/bundle-stats.json",
      "build:production": "webpack --mode production --entry . --plugin=compression-webpack-plugin --output-library=octokitEndpoint --output-path=./dist --output-filename=octokit-endpoint.min.js --devtool source-map",
      "bundle-report": "webpack-bundle-analyzer dist/bundle-stats.json --mode=static --no-open --report dist/bundle-report.html",
      coverage: "nyc report --reporter=html && open coverage/index.html",
      "coverage:upload": "nyc report --reporter=text-lcov | coveralls",
      pretest: "standard && standard-markdown *.md",
      test: "nyc mocha test/*-test.js",
      "test:browser": "cypress run --browser chrome",
      "semantic-release": "semantic-release"
    },
    repository: {
      type: "git",
      url: "git+https://github.com/octokit/endpoint.js.git"
    },
    keywords: ["octokit", "github", "api", "rest"],
    author: "Gregor Martynus (https://github.com/gr2m)",
    license: "MIT",
    bugs: {
      url: "https://github.com/octokit/endpoint.js/issues"
    },
    homepage: "https://github.com/octokit/endpoint.js#readme",
    devDependencies: {
      chai: "^4.2.0",
      "compression-webpack-plugin": "^2.0.0",
      coveralls: "^3.0.2",
      cypress: "^3.1.0",
      mkdirp: "^0.5.1",
      mocha: "^6.0.2",
      "npm-run-all": "^4.1.3",
      nyc: "^13.1.0",
      "semantic-release": "^15.10.3",
      "sinon-chai": "^3.2.0",
      standard: "^12.0.1",
      "standard-markdown": "^5.0.1",
      webpack: "^4.21.0",
      "webpack-bundle-analyzer": "^3.0.3",
      "webpack-cli": "^3.1.2"
    },
    dependencies: {
      deepmerge: "3.2.0",
      "is-plain-object": "^2.0.4",
      "universal-user-agent": "^2.0.1",
      "url-template": "^2.0.8"
    },
    bundlesize: [{
      path: "./dist/octokit-endpoint.min.js.gz",
      maxSize: "3.5KB"
    }],
    release: {
      publish: ["@semantic-release/npm", {
        path: "@semantic-release/github",
        assets: ["dist/*", "!dist/*.map.gz"]
      }]
    },
    standard: {
      globals: ["describe", "before", "beforeEach", "afterEach", "after", "it", "expect"]
    },
    files: ["lib", "with-defaults.js"],
    _resolved: "https://registry.npmjs.org/@octokit/endpoint/-/endpoint-3.2.3.tgz",
    _integrity: "sha512-yUPCt4vMIOclox13CUxzuKiPJIFo46b/6GhUnUTw5QySczN1L0DtSxgmIZrZV4SAb9EyAqrceoyrWoYVnfF2AA==",
    _from: "@octokit/endpoint@3.2.3"
  };
}, function (e) {
  e.exports = {
    name: "@octokit/request",
    version: "2.4.2",
    publishConfig: {
      access: "public"
    },
    description: "Send parameterized requests to GitHub’s APIs with sensible defaults in browsers and Node",
    main: "index.js",
    scripts: {
      prebuild: "mkdirp dist/",
      build: "npm-run-all build:*",
      "build:development": "webpack --mode development --entry . --output-library=Octokit --output=./dist/octokit-request.js --profile --json > dist/bundle-stats.json",
      "build:production": "webpack --mode production --entry . --plugin=compression-webpack-plugin --output-library=Octokit --output-path=./dist --output-filename=octokit-request.min.js --devtool source-map",
      "bundle-report": "webpack-bundle-analyzer dist/bundle-stats.json --mode=static --no-open --report dist/bundle-report.html",
      coverage: "nyc report --reporter=html && open coverage/index.html",
      "coverage:upload": "nyc report --reporter=text-lcov | coveralls",
      pretest: "standard",
      test: "nyc mocha test/*-test.js",
      "test:browser": "cypress run --browser chrome",
      "semantic-release": "semantic-release"
    },
    repository: {
      type: "git",
      url: "https://github.com/octokit/request.js.git"
    },
    keywords: ["octokit", "github", "api", "request"],
    author: "Gregor Martynus (https://github.com/gr2m)",
    license: "MIT",
    bugs: {
      url: "https://github.com/octokit/request.js/issues"
    },
    homepage: "https://github.com/octokit/request.js#readme",
    dependencies: {
      "@octokit/endpoint": "^3.2.0",
      deprecation: "^1.0.1",
      "is-plain-object": "^2.0.4",
      "node-fetch": "^2.3.0",
      once: "^1.4.0",
      "universal-user-agent": "^2.0.1"
    },
    devDependencies: {
      chai: "^4.2.0",
      "compression-webpack-plugin": "^2.0.0",
      coveralls: "^3.0.2",
      cypress: "^3.1.0",
      "fetch-mock": "^7.2.0",
      mkdirp: "^0.5.1",
      mocha: "^6.0.0",
      "npm-run-all": "^4.1.3",
      nyc: "^13.1.0",
      "semantic-release": "^15.10.5",
      "simple-mock": "^0.8.0",
      standard: "^12.0.1",
      webpack: "^4.22.0",
      "webpack-bundle-analyzer": "^3.0.3",
      "webpack-cli": "^3.1.2"
    },
    browser: {
      "./lib/get-request-agent.js": !1,
      "./lib/request/get-buffer-response.js": "./lib/request/get-buffer-response-browser.js"
    },
    bundlesize: [{
      path: "./dist/octokit-request.min.js.gz",
      maxSize: "5KB"
    }],
    release: {
      publish: ["@semantic-release/npm", {
        path: "@semantic-release/github",
        assets: ["dist/*", "!dist/*.map.gz"]
      }]
    },
    standard: {
      globals: ["describe", "before", "beforeEach", "afterEach", "after", "it", "expect"]
    },
    files: ["lib"],
    _resolved: "https://registry.npmjs.org/@octokit/request/-/request-2.4.2.tgz",
    _integrity: "sha512-lxVlYYvwGbKSHXfbPk5vxEA8w4zHOH1wobado4a9EfsyD3Cbhuhus1w0Ye9Ro0eMubGO8kNy5d+xNFisM3Tvaw==",
    _from: "@octokit/request@2.4.2"
  };
}, function (e, r, t) {
  e.exports = function e(r, t) {
    var n = r.defaults(t);

    var s = function s(e, r) {
      return i(n(e, r));
    };

    s.endpoint = n;
    s.defaults = e.bind(null, n);
    return s;
  };

  var i = t(12);
}, function (e, r, t) {
  "use strict";

  var i = function () {
    if ("undefined" != typeof self) return self;
    if ("undefined" != typeof window) return window;
    if (void 0 !== i) return i;
    throw new Error("unable to locate global object");
  }();

  e.exports = r = i.fetch, r.default = i.fetch.bind(i), r.Headers = i.Headers, r.Request = i.Request, r.Response = i.Response;
}, function (e, r) {
  e.exports = function (e) {
    return e.buffer();
  };
}, function (e, r) {
  e.exports = function e(r, t) {
    if (r && t) return e(r)(t);
    if ("function" != typeof r) throw new TypeError("need wrapper function");
    Object.keys(r).forEach(function (e) {
      i[e] = r[e];
    });
    return i;

    function i() {
      for (var e = new Array(arguments.length), t = 0; t < e.length; t++) {
        e[t] = arguments[t];
      }

      var i = r.apply(this, e),
          n = e[e.length - 1];
      return "function" == typeof i && i !== n && Object.keys(n).forEach(function (e) {
        i[e] = n[e];
      }), i;
    }
  };
}, function (e, r, t) {
  var i = t(37),
      n = t(38),
      s = t(39),
      o = Function.bind,
      p = o.bind(o);

  function a(e, r, t) {
    var i = p(s, null).apply(null, t ? [r, null, t] : [r, null]);
    e.api = {
      remove: i
    }, e.remove = i, ["before", "error", "after", "wrap"].forEach(function (i) {
      var o = t ? [r, i, t] : [r, i];
      e[i] = e.api[i] = p(n, null).apply(null, o), e.remove[i] = e.api.remove[i] = p(s, null).apply(null, o);
    });
  }

  function u() {
    var e = {
      registry: {}
    },
        r = i.bind(null, e);
    return a(r, e), r;
  }

  var d = !1;

  function g() {
    return d || (console.warn('[before-after-hook]: "Hook()" repurposing warning, use "Hook.Collection()". Read more: https://git.io/upgrade-before-after-hook-to-1.4'), d = !0), u();
  }

  g.Singular = function () {
    var e = {
      registry: {}
    },
        r = i.bind(null, e, "h");
    return a(r, e, "h"), r;
  }.bind(), g.Collection = u.bind(), e.exports = g, e.exports.Hook = g, e.exports.Singular = g.Singular, e.exports.Collection = g.Collection;
}, function (e, r) {
  e.exports = function e(r, t, i, n) {
    3 === arguments.length && (n = i, i = {});
    if ("function" != typeof n) throw new Error("method for before hook must be a function");
    if ("object" != _typeof(i)) throw new Error("options for before hook must be an object");
    if (Array.isArray(t)) return t.reverse().reduce(function (t, n) {
      return e.bind(null, r, n, i, t);
    }, n)();
    return Promise.resolve().then(function () {
      return r.registry[t] ? r.registry[t].reduce(function (e, r) {
        return r.hook.bind(null, e, i);
      }, n)() : n(i);
    });
  };
}, function (e, r) {
  e.exports = function (e, r, t, i) {
    var n = i;
    e.registry[t] || (e.registry[t] = []);
    "before" === r && (i = function i(e, r) {
      return Promise.resolve().then(n.bind(null, r)).then(e.bind(null, r));
    });
    "after" === r && (i = function i(e, r) {
      var t;
      return Promise.resolve().then(e.bind(null, r)).then(function (e) {
        return n(t = e, r);
      }).then(function () {
        return t;
      });
    });
    "error" === r && (i = function i(e, r) {
      return Promise.resolve().then(e.bind(null, r)).catch(function (e) {
        return n(e, r);
      });
    });
    e.registry[t].push({
      hook: i,
      orig: n
    });
  };
}, function (e, r) {
  e.exports = function (e, r, t, i) {
    r && console.warn("hook.remove.%s(name, method) is deprecated, use hook.remove(name, method)", r);
    if (!e.registry[t]) return;
    var n = e.registry[t].map(function (e) {
      return e.orig;
    }).indexOf(i);
    if (-1 === n) return;
    e.registry[t].splice(n, 1);
  };
}, function (e, r, t) {
  e.exports = function (e, r) {
    e.headers && (e.headers = Object.keys(e.headers).reduce(function (r, t) {
      return r[t.toLowerCase()] = e.headers[t], r;
    }, {}));
    var t = {
      headers: e.headers || {},
      request: e.request || {},
      mediaType: {
        previews: [],
        format: ""
      }
    };
    e.baseUrl && (t.baseUrl = e.baseUrl);
    e.userAgent && (t.headers["user-agent"] = e.userAgent);
    e.previews && (t.mediaType.previews = e.previews);
    e.timeout && (p(r, new i("[@octokit/rest] new Octokit({timout}) is deprecated. Use {request: {agent}} instead. See https://github.com/octokit/rest.js#client-options")), t.request.timeout = e.timeout);
    e.agent && (a(r, new i("[@octokit/rest] new Octokit({agent}) is deprecated. Use {request: {agent}} instead. See https://github.com/octokit/rest.js#client-options")), t.request.agent = e.agent);
    e.headers && u(r, new i("[@octokit/rest] new Octokit({headers}) is deprecated. Use {userAgent, previews} instead. See https://github.com/octokit/rest.js#client-options"));
    var s = t.headers["user-agent"],
        d = "octokit.js/".concat(o.version, " ").concat(n());
    return t.headers["user-agent"] = [s, d].filter(Boolean).join(" "), t;
  };

  var i = t(0),
      n = t(6),
      s = t(2),
      o = t(41),
      p = s(function (e, r) {
    return e.warn(r);
  }),
      a = s(function (e, r) {
    return e.warn(r);
  }),
      u = s(function (e, r) {
    return e.warn(r);
  });
}, function (e) {
  e.exports = {
    name: "@octokit/rest",
    version: "0.0.0-semantically-released",
    publishConfig: {
      access: "public"
    },
    description: "GitHub REST API client for Node.js",
    keywords: ["octokit", "github", "rest", "api-client"],
    author: "Gregor Martynus (https://github.com/gr2m)",
    contributors: [{
      name: "Mike de Boer",
      email: "info@mikedeboer.nl"
    }, {
      name: "Fabian Jakobs",
      email: "fabian@c9.io"
    }, {
      name: "Joe Gallo",
      email: "joe@brassafrax.com"
    }, {
      name: "Gregor Martynus",
      url: "https://github.com/gr2m"
    }],
    repository: "https://github.com/octokit/rest.js",
    dependencies: {
      "@octokit/request": "2.4.2",
      "atob-lite": "^2.0.0",
      "before-after-hook": "^1.4.0",
      "btoa-lite": "^1.0.0",
      deprecation: "^1.0.1",
      "lodash.get": "^4.4.2",
      "lodash.set": "^4.3.2",
      "lodash.uniq": "^4.5.0",
      "octokit-pagination-methods": "^1.1.0",
      once: "^1.4.0",
      "universal-user-agent": "^2.0.0",
      "url-template": "^2.0.8"
    },
    devDependencies: {
      "@gimenete/type-writer": "^0.1.3",
      "@octokit/fixtures-server": "^5.0.1",
      "@octokit/routes": "19.1.1",
      "@types/node": "^11.11.3",
      apidoc: "^0.17.6",
      bundlesize: "^0.17.0",
      chai: "^4.1.2",
      "compression-webpack-plugin": "^2.0.0",
      coveralls: "^3.0.0",
      "gh-pages-with-token": "^1.0.0",
      glob: "^7.1.2",
      "http-proxy-agent": "^2.1.0",
      "lodash.camelcase": "^4.3.0",
      "lodash.merge": "^4.6.1",
      "lodash.upperfirst": "^4.3.1",
      mkdirp: "^0.5.1",
      mocha: "^6.0.0",
      mustache: "^3.0.0",
      nock: "^10.0.0",
      "npm-run-all": "^4.1.2",
      nyc: "^13.2.0",
      prettier: "^1.14.2",
      proxy: "^0.2.4",
      "semantic-release": "^15.0.0",
      sinon: "^7.2.4",
      "sinon-chai": "^3.0.0",
      "sort-keys": "^2.0.0",
      standard: "^12.0.0",
      "string-to-arraybuffer": "^1.0.0",
      typescript: "^3.3.1",
      webpack: "^4.0.0",
      "webpack-bundle-analyzer": "^3.0.0",
      "webpack-cli": "^3.0.0"
    },
    types: "index.d.ts",
    scripts: {
      coverage: "nyc report --reporter=html && open coverage/index.html",
      pretest: "standard",
      test: 'nyc mocha test/mocha-node-setup.js "test/*/**/*-test.js"',
      "test:browser": "cypress run --browser chrome",
      "test:memory": "mocha test/memory-test",
      build: "npm-run-all build:*",
      "prebuild:docs": "mkdirp doc/",
      "build:docs": "node scripts/generate-api-docs",
      "postbuild:docs": "apidoc -i doc/ -o doc/",
      "build:ts": "node scripts/generate-types",
      "prebuild:browser": "mkdirp dist/",
      "build:browser": "npm-run-all build:browser:*",
      "build:browser:development": "webpack --mode development --entry . --output-library=Octokit --output=./dist/octokit-rest.js --profile --json > dist/bundle-stats.json",
      "build:browser:production": "webpack --mode production --entry . --plugin=compression-webpack-plugin --output-library=Octokit --output-path=./dist --output-filename=octokit-rest.min.js --devtool source-map",
      "generate-bundle-report": "webpack-bundle-analyzer dist/bundle-stats.json --mode=static --no-open --report dist/bundle-report.html",
      "generate-routes": "node scripts/generate-routes",
      "prevalidate:ts": "npm run -s build:ts",
      "validate:ts": "tsc --target es6 --noImplicitAny index.d.ts",
      "postvalidate:ts": "tsc --noEmit --target es6 test/typescript-validate.ts",
      "deploy-docs": "gh-pages-with-token -d doc",
      "semantic-release": "semantic-release",
      "start-fixtures-server": "octokit-fixtures-server"
    },
    license: "MIT",
    files: ["index.js", "index.d.ts", "lib", "plugins"],
    apidoc: {
      template: {
        withCompare: !1
      }
    },
    nyc: {
      ignore: ["test"]
    },
    release: {
      publish: ["@semantic-release/npm", {
        path: "@semantic-release/github",
        assets: ["dist/*", "!dist/*.map.gz"]
      }]
    },
    standard: {
      globals: ["describe", "before", "beforeEach", "afterEach", "after", "it", "expect", "cy"]
    },
    bundlesize: [{
      path: "./dist/octokit-rest.min.js.gz",
      maxSize: "33 kB"
    }]
  };
}, function (e, r, t) {
  e.exports = function e(r, t, n) {
    var s = t.defaults(n);

    var o = function (e, r, t, n) {
      var s = r.merge(t, n);
      return e("request", s, function (e) {
        return i(r.parse(e));
      });
    }.bind(null, r, s);

    o.endpoint = s;
    o.defaults = e.bind(null, r, s);
    return o;
  };

  var i = t(12);
}, function (e, r, t) {
  e.exports = function (e, r) {
    return i(e.includes(r) ? e : e.concat(r));
  };

  var i = t(8);
}, function (e, r) {
  e.exports = function (e) {
    e.hook.wrap("request", function (r, t) {
      e.log.debug("request", t);
      var i = Date.now(),
          n = e.request.endpoint.parse(t),
          s = n.url.replace(t.baseUrl, "");
      return r(t).then(function (r) {
        return e.log.info("".concat(n.method, " ").concat(s, " - ").concat(r.status, " in ").concat(Date.now() - i, "ms")), r;
      }).catch(function (r) {
        throw e.log.info("".concat(n.method, " ").concat(s, " - ").concat(r.status, " in ").concat(Date.now() - i, "ms")), r;
      });
    });
  };
}, function (e, r, t) {
  e.exports = function (e, r) {
    if (r.auth) return void (e.authenticate = function () {
      n(e.log, new i('[@octokit/rest] octokit.authenticate() is deprecated and has no effect when "auth" option is set on Octokit constructor'));
    });
    var t = {
      octokit: e,
      auth: !1
    };
    e.authenticate = s.bind(null, t), e.hook.before("request", o.bind(null, t)), e.hook.error("request", p.bind(null, t));
  };

  var i = t(0),
      n = t(2)(function (e, r) {
    return e.warn(r);
  }),
      s = t(46),
      o = t(47),
      p = t(49);
}, function (e, r, t) {
  e.exports = function (e, r) {
    if (n(e.octokit.log, new i('[@octokit/rest] octokit.authenticate() is deprecated. Use "auth" constructor option instead.')), !r) return void (e.auth = !1);

    switch (r.type) {
      case "basic":
        if (!r.username || !r.password) throw new Error("Basic authentication requires both a username and password to be set");
        break;

      case "oauth":
        if (!(r.token || r.key && r.secret)) throw new Error("OAuth2 authentication requires a token or key & secret to be set");
        break;

      case "token":
      case "app":
        if (!r.token) throw new Error("Token authentication requires a token to be set");
        break;

      default:
        throw new Error("Invalid authentication type, must be 'basic', 'oauth', 'token' or 'app'");
    }

    e.auth = r;
  };

  var i = t(0),
      n = t(2)(function (e, r) {
    return e.warn(r);
  });
}, function (e, r, t) {
  e.exports = function (e, r) {
    if (!e.auth.type) return;

    if ("basic" === e.auth.type) {
      var _t = i("".concat(e.auth.username, ":").concat(e.auth.password));

      return void (r.headers.authorization = "Basic ".concat(_t));
    }

    if ("token" === e.auth.type) return void (r.headers.authorization = "token ".concat(e.auth.token));

    if ("app" === e.auth.type) {
      r.headers.authorization = "Bearer ".concat(e.auth.token);

      var _t2 = r.headers.accept.split(",").concat("application/vnd.github.machine-man-preview+json");

      return void (r.headers.accept = n(_t2).filter(Boolean).join(","));
    }

    if (r.url += -1 === r.url.indexOf("?") ? "?" : "&", e.auth.token) return void (r.url += "access_token=".concat(encodeURIComponent(e.auth.token)));
    var t = encodeURIComponent(e.auth.key),
        s = encodeURIComponent(e.auth.secret);
    r.url += "client_id=".concat(t, "&client_secret=").concat(s);
  };

  var i = t(13),
      n = t(48);
}, function (e, r, t) {
  (function (r) {
    var t = 200,
        i = "__lodash_hash_undefined__",
        n = "[object Function]",
        s = "[object GeneratorFunction]",
        o = /^\[object .+?Constructor\]$/,
        p = "object" == _typeof(r) && r && r.Object === Object && r,
        a = "object" == (typeof self === "undefined" ? "undefined" : _typeof(self)) && self && self.Object === Object && self,
        u = p || a || Function("return this")();

    function d(e, r) {
      return !!(e ? e.length : 0) && function (e, r, t) {
        if (r != r) return function (e, r, t, i) {
          var n = e.length,
              s = t + (i ? 1 : -1);

          for (; i ? s-- : ++s < n;) {
            if (r(e[s], s, e)) return s;
          }

          return -1;
        }(e, c, t);
        var i = t - 1,
            n = e.length;

        for (; ++i < n;) {
          if (e[i] === r) return i;
        }

        return -1;
      }(e, r, 0) > -1;
    }

    function g(e, r, t) {
      for (var i = -1, n = e ? e.length : 0; ++i < n;) {
        if (t(r, e[i])) return !0;
      }

      return !1;
    }

    function c(e) {
      return e != e;
    }

    function m(e, r) {
      return e.has(r);
    }

    function l(e) {
      var r = -1,
          t = Array(e.size);
      return e.forEach(function (e) {
        t[++r] = e;
      }), t;
    }

    var y,
        h = Array.prototype,
        q = Function.prototype,
        b = Object.prototype,
        _ = u["__core-js_shared__"],
        w = (y = /[^.]+$/.exec(_ && _.keys && _.keys.IE_PROTO || "")) ? "Symbol(src)_1." + y : "",
        f = q.toString,
        v = b.hasOwnProperty,
        E = b.toString,
        T = RegExp("^" + f.call(v).replace(/[\\^$.*+?()[\]{}|]/g, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"),
        k = h.splice,
        j = D(u, "Map"),
        G = D(u, "Set"),
        P = D(Object, "create");

    function O(e) {
      var r = -1,
          t = e ? e.length : 0;

      for (this.clear(); ++r < t;) {
        var i = e[r];
        this.set(i[0], i[1]);
      }
    }

    function S(e) {
      var r = -1,
          t = e ? e.length : 0;

      for (this.clear(); ++r < t;) {
        var i = e[r];
        this.set(i[0], i[1]);
      }
    }

    function C(e) {
      var r = -1,
          t = e ? e.length : 0;

      for (this.clear(); ++r < t;) {
        var i = e[r];
        this.set(i[0], i[1]);
      }
    }

    function x(e) {
      var r = -1,
          t = e ? e.length : 0;

      for (this.__data__ = new C(); ++r < t;) {
        this.add(e[r]);
      }
    }

    function A(e, r) {
      for (var t, i, n = e.length; n--;) {
        if ((t = e[n][0]) === (i = r) || t != t && i != i) return n;
      }

      return -1;
    }

    function R(e) {
      return !(!L(e) || (r = e, w && w in r)) && (function (e) {
        var r = L(e) ? E.call(e) : "";
        return r == n || r == s;
      }(e) || function (e) {
        var r = !1;
        if (null != e && "function" != typeof e.toString) try {
          r = !!(e + "");
        } catch (e) {}
        return r;
      }(e) ? T : o).test(function (e) {
        if (null != e) {
          try {
            return f.call(e);
          } catch (e) {}

          try {
            return e + "";
          } catch (e) {}
        }

        return "";
      }(e));
      var r;
    }

    O.prototype.clear = function () {
      this.__data__ = P ? P(null) : {};
    }, O.prototype.delete = function (e) {
      return this.has(e) && delete this.__data__[e];
    }, O.prototype.get = function (e) {
      var r = this.__data__;

      if (P) {
        var t = r[e];
        return t === i ? void 0 : t;
      }

      return v.call(r, e) ? r[e] : void 0;
    }, O.prototype.has = function (e) {
      var r = this.__data__;
      return P ? void 0 !== r[e] : v.call(r, e);
    }, O.prototype.set = function (e, r) {
      return this.__data__[e] = P && void 0 === r ? i : r, this;
    }, S.prototype.clear = function () {
      this.__data__ = [];
    }, S.prototype.delete = function (e) {
      var r = this.__data__,
          t = A(r, e);
      return !(t < 0 || (t == r.length - 1 ? r.pop() : k.call(r, t, 1), 0));
    }, S.prototype.get = function (e) {
      var r = this.__data__,
          t = A(r, e);
      return t < 0 ? void 0 : r[t][1];
    }, S.prototype.has = function (e) {
      return A(this.__data__, e) > -1;
    }, S.prototype.set = function (e, r) {
      var t = this.__data__,
          i = A(t, e);
      return i < 0 ? t.push([e, r]) : t[i][1] = r, this;
    }, C.prototype.clear = function () {
      this.__data__ = {
        hash: new O(),
        map: new (j || S)(),
        string: new O()
      };
    }, C.prototype.delete = function (e) {
      return U(this, e).delete(e);
    }, C.prototype.get = function (e) {
      return U(this, e).get(e);
    }, C.prototype.has = function (e) {
      return U(this, e).has(e);
    }, C.prototype.set = function (e, r) {
      return U(this, e).set(e, r), this;
    }, x.prototype.add = x.prototype.push = function (e) {
      return this.__data__.set(e, i), this;
    }, x.prototype.has = function (e) {
      return this.__data__.has(e);
    };
    var F = G && 1 / l(new G([, -0]))[1] == 1 / 0 ? function (e) {
      return new G(e);
    } : function () {};

    function U(e, r) {
      var t,
          i,
          n = e.__data__;
      return ("string" == (i = _typeof(t = r)) || "number" == i || "symbol" == i || "boolean" == i ? "__proto__" !== t : null === t) ? n["string" == typeof r ? "string" : "hash"] : n.map;
    }

    function D(e, r) {
      var t = function (e, r) {
        return null == e ? void 0 : e[r];
      }(e, r);

      return R(t) ? t : void 0;
    }

    function L(e) {
      var r = _typeof(e);

      return !!e && ("object" == r || "function" == r);
    }

    e.exports = function (e) {
      return e && e.length ? function (e, r, i) {
        var n = -1,
            s = d,
            o = e.length,
            p = !0,
            a = [],
            u = a;
        if (i) p = !1, s = g;else if (o >= t) {
          var c = r ? null : F(e);
          if (c) return l(c);
          p = !1, s = m, u = new x();
        } else u = r ? [] : a;

        e: for (; ++n < o;) {
          var y = e[n],
              h = r ? r(y) : y;

          if (y = i || 0 !== y ? y : 0, p && h == h) {
            for (var q = u.length; q--;) {
              if (u[q] === h) continue e;
            }

            r && u.push(h), a.push(y);
          } else s(u, h, i) || (u !== a && u.push(h), a.push(y));
        }

        return a;
      }(e) : [];
    };
  }).call(this, t(7));
}, function (e, r, t) {
  e.exports = function (e, r, t) {
    if (!r.headers) throw r;
    var n = /required/.test(r.headers["x-github-otp"] || "");
    if (401 !== r.status || !n) throw r;
    if (401 === r.status && n && r.request && r.request.headers["x-github-otp"]) throw new i("Invalid one-time password for two-factor authentication", 401, r.headers, t);
    if ("function" != typeof e.auth.on2fa) throw new i("2FA required, but options.on2fa is not a function. See https://github.com/octokit/rest.js#authentication", 401, r.headers, t);
    return Promise.resolve().then(function () {
      return e.auth.on2fa();
    }).then(function (r) {
      var i = Object.assign(t, {
        headers: Object.assign({
          "x-github-otp": r
        }, t.headers)
      });
      return e.octokit.request(i);
    });
  };

  var i = t(1);
}, function (e, r, t) {
  e.exports = function (e, r) {
    if (!r.auth) return;
    s(r.auth);
    var t = {
      octokit: e,
      auth: r.auth
    };
    e.hook.before("request", i.bind(null, t)), e.hook.error("request", n.bind(null, t));
  };

  var i = t(51),
      n = t(54),
      s = t(55);
}, function (e, r, t) {
  e.exports = function (e, r) {
    if ("string" == typeof e.auth) {
      if (r.headers.authorization = n(e.auth), /^bearer /i.test(e.auth) && !/machine-man/.test(r.headers.accept)) {
        var _e5 = r.headers.accept.split(",").concat("application/vnd.github.machine-man-preview+json");

        r.headers.accept = _e5.filter(Boolean).join(",");
      }

      return;
    }

    if (e.auth.username) {
      var _t3 = i("".concat(e.auth.username, ":").concat(e.auth.password));

      return r.headers.authorization = "Basic ".concat(_t3), void (e.otp && (r.headers["x-github-otp"] = e.otp));
    }

    if (e.auth.clientId) {
      if (/\/applications\/:?[\w_]+\/tokens\/:?[\w_]+($|\?)/.test(r.url)) {
        var _t4 = i("".concat(e.auth.clientId, ":").concat(e.auth.clientSecret));

        return void (r.headers.authorization = "Basic ".concat(_t4));
      }

      return r.url += -1 === r.url.indexOf("?") ? "?" : "&", void (r.url += "client_id=".concat(e.auth.clientId, "&client_secret=").concat(e.auth.clientSecret));
    }

    return Promise.resolve().then(function () {
      return e.auth();
    }).then(function (e) {
      r.headers.authorization = n(e);
    });
  };

  var i = t(13),
      n = t(52);
}, function (e, r, t) {
  e.exports = function (e) {
    if (/^(basic|bearer|token) /i.test(e)) return e;

    try {
      if (n.test(i(e))) return "basic ".concat(e);
    } catch (e) {}

    if (3 === e.split(/\./).length) return "bearer ".concat(e);
    return "token ".concat(e);
  };

  var i = t(53),
      n = /^[\w-]+:/;
}, function (e, r) {
  e.exports = function (e) {
    return atob(e);
  };
}, function (e, r, t) {
  e.exports = function (e, r, t) {
    if (!r.headers) throw r;
    var n = /required/.test(r.headers["x-github-otp"] || "");
    if (401 !== r.status || !n) throw r;

    if (401 === r.status && n && r.request && r.request.headers["x-github-otp"]) {
      if (!e.otp) throw new i("Invalid one-time password for two-factor authentication", 401, r.headers, t);
      delete e.otp;
    }

    if ("function" != typeof e.auth.on2fa) throw new i("2FA required, but options.on2fa is not a function. See https://github.com/octokit/rest.js#authentication", 401, r.headers, t);
    return Promise.resolve().then(function () {
      return e.auth.on2fa();
    }).then(function (r) {
      var i = Object.assign(t, {
        headers: Object.assign({
          "x-github-otp": r
        }, t.headers)
      });
      return e.octokit.request(i).then(function (t) {
        return e.otp = r, t;
      });
    });
  };

  var i = t(1);
}, function (e, r) {
  e.exports = function (e) {
    if ("string" == typeof e) return;
    if ("function" == typeof e) return;
    if (e.username && e.password) return;
    if (e.clientId && e.clientSecret) return;
    throw new Error("Invalid \"auth\" option: ".concat(JSON.stringify(e)));
  };
}, function (e, r, t) {
  e.exports = function (e) {
    e.paginate = n.bind(null, e), e.paginate.iterator = i.bind(null, e);
  };

  var i = t(14),
      n = t(57);
}, function (e, r, t) {
  e.exports = function (e, r, t, n) {
    "function" == typeof t && (n = t, t = void 0);
    return t = e.request.endpoint.merge(r, t), function e(r, t, n, a) {
      return n.next().then(function (u) {
        if (u.done) return t;
        var d = !1;

        if ("total_count" in u.value.data && u.value.headers.link) {
          var _e6 = u.value.data.incomplete_results,
              _t5 = u.value.data.repository_selection,
              _n2 = u.value.data.total_count;
          delete u.value.data.incomplete_results, delete u.value.data.repository_selection, delete u.value.data.total_count;
          var _a = Object.keys(u.value.data)[0];
          u.value.data = u.value.data[_a], Object.defineProperty(u.value.data, _a, {
            get: function get() {
              return p(r.log, new i("[@octokit/rest] \"result.data.".concat(_a, "\" is deprecated. Use \"result.data\" instead"))), u.value.data;
            }
          }), void 0 !== _e6 && Object.defineProperty(u.value.data, "incomplete_results", {
            get: function get() {
              return s(r.log, new i('[@octokit/rest] "result.data.incomplete_results" is deprecated.')), _e6;
            }
          }), Object.defineProperty(u.value.data, "repository_selection", {
            get: function get() {
              return o(r.log, new i('[@octokit/rest] "result.data.repository_selection" is deprecated.')), _t5;
            }
          }), Object.defineProperty(u.value.data, "total_count", {
            get: function get() {
              return o(r.log, new i('[@octokit/rest] "result.data.total_count" is deprecated.')), _n2;
            }
          });
        }

        return t = t.concat(a ? a(u.value, function () {
          d = !0;
        }) : u.value.data), d ? t : e(r, t, n, a);
      });
    }(e, [], a(e, t)[Symbol.asyncIterator](), n);
  };

  var i = t(0),
      n = t(2),
      s = n(function (e, r) {
    return e.warn(r);
  }),
      o = n(function (e, r) {
    return e.warn(r);
  }),
      p = n(function (e, r) {
    return e.warn(r);
  }),
      a = t(14);
}, function (e, r, t) {
  e.exports = function (e) {
    e.hook.wrap("request", function (e, r) {
      var t = /\/repos\/:?\w+\/:?\w+\/git\/refs\/:?\w+/.test(r.url);
      if (!t) return e(r);
      var n = "ref" in r;
      return e(r).then(function (e) {
        if (n) {
          if (Array.isArray(e.data)) throw new i("More than one reference found for \"".concat(r.ref, "\""), 404, {}, r);
          return e;
        }

        return Array.isArray(e.data) || (e.data = [e.data]), e;
      }).catch(function (e) {
        if (n) throw e;
        if (404 === e.status) return {
          status: 200,
          headers: e.headers,
          data: []
        };
        throw e;
      });
    });
  };

  var i = t(1);
}, function (e, r, t) {
  e.exports = function (e) {
    e.registerEndpoints = i.bind(null, e);
  };

  var i = t(60);
}, function (e, r, t) {
  e.exports = function (e, r) {
    Object.keys(r).forEach(function (t) {
      e[t] || (e[t] = {}), Object.keys(r[t]).forEach(function (n) {
        var s = r[t][n];
        var o = ["method", "url", "headers"].reduce(function (e, r) {
          return void 0 !== s[r] && (e[r] = s[r]), e;
        }, {});
        o.request = {
          validate: s.params
        };
        var p = e.request.defaults(o);
        s.deprecated ? e[t][n] = function () {
          return e.log.warn(new i("[@octokit/rest] ".concat(s.deprecated))), e[t][n] = p, p.apply(null, arguments);
        } : e[t][n] = p;
      });
    });
  };

  var i = t(0);
}, function (e, r, t) {
  e.exports = function (e) {
    i.gitdata = i.git, i.authorization = i.oauthAuthorizations, i.pullRequests = i.pulls, e.registerEndpoints(i);
  };

  var i = t(62);
}, function (e) {
  e.exports = {
    activity: {
      checkStarringRepo: {
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/user/starred/:owner/:repo"
      },
      deleteRepoSubscription: {
        method: "DELETE",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/subscription"
      },
      deleteThreadSubscription: {
        method: "DELETE",
        params: {
          thread_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/notifications/threads/:thread_id/subscription"
      },
      getRepoSubscription: {
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/subscription"
      },
      getThread: {
        method: "GET",
        params: {
          thread_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/notifications/threads/:thread_id"
      },
      getThreadSubscription: {
        method: "GET",
        params: {
          thread_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/notifications/threads/:thread_id/subscription"
      },
      listEventsForOrg: {
        method: "GET",
        params: {
          org: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          username: {
            required: !0,
            type: "string"
          }
        },
        url: "/users/:username/events/orgs/:org"
      },
      listEventsForUser: {
        method: "GET",
        params: {
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          username: {
            required: !0,
            type: "string"
          }
        },
        url: "/users/:username/events"
      },
      listFeeds: {
        method: "GET",
        params: {},
        url: "/feeds"
      },
      listNotifications: {
        method: "GET",
        params: {
          all: {
            type: "boolean"
          },
          before: {
            type: "string"
          },
          page: {
            type: "integer"
          },
          participating: {
            type: "boolean"
          },
          per_page: {
            type: "integer"
          },
          since: {
            type: "string"
          }
        },
        url: "/notifications"
      },
      listNotificationsForRepo: {
        method: "GET",
        params: {
          all: {
            type: "boolean"
          },
          before: {
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          participating: {
            type: "boolean"
          },
          per_page: {
            type: "integer"
          },
          repo: {
            required: !0,
            type: "string"
          },
          since: {
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/notifications"
      },
      listPublicEvents: {
        method: "GET",
        params: {
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          }
        },
        url: "/events"
      },
      listPublicEventsForOrg: {
        method: "GET",
        params: {
          org: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          }
        },
        url: "/orgs/:org/events"
      },
      listPublicEventsForRepoNetwork: {
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/networks/:owner/:repo/events"
      },
      listPublicEventsForUser: {
        method: "GET",
        params: {
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          username: {
            required: !0,
            type: "string"
          }
        },
        url: "/users/:username/events/public"
      },
      listReceivedEventsForUser: {
        method: "GET",
        params: {
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          username: {
            required: !0,
            type: "string"
          }
        },
        url: "/users/:username/received_events"
      },
      listReceivedPublicEventsForUser: {
        method: "GET",
        params: {
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          username: {
            required: !0,
            type: "string"
          }
        },
        url: "/users/:username/received_events/public"
      },
      listRepoEvents: {
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/events"
      },
      listReposStarredByAuthenticatedUser: {
        method: "GET",
        params: {
          direction: {
            enum: ["asc", "desc"],
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          sort: {
            enum: ["created", "updated"],
            type: "string"
          }
        },
        url: "/user/starred"
      },
      listReposStarredByUser: {
        method: "GET",
        params: {
          direction: {
            enum: ["asc", "desc"],
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          sort: {
            enum: ["created", "updated"],
            type: "string"
          },
          username: {
            required: !0,
            type: "string"
          }
        },
        url: "/users/:username/starred"
      },
      listReposWatchedByUser: {
        method: "GET",
        params: {
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          username: {
            required: !0,
            type: "string"
          }
        },
        url: "/users/:username/subscriptions"
      },
      listStargazersForRepo: {
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/stargazers"
      },
      listWatchedReposForAuthenticatedUser: {
        method: "GET",
        params: {
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          }
        },
        url: "/user/subscriptions"
      },
      listWatchersForRepo: {
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/subscribers"
      },
      markAsRead: {
        method: "PUT",
        params: {
          last_read_at: {
            type: "string"
          }
        },
        url: "/notifications"
      },
      markNotificationsAsReadForRepo: {
        method: "PUT",
        params: {
          last_read_at: {
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/notifications"
      },
      markThreadAsRead: {
        method: "PATCH",
        params: {
          thread_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/notifications/threads/:thread_id"
      },
      setRepoSubscription: {
        method: "PUT",
        params: {
          ignored: {
            type: "boolean"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          subscribed: {
            type: "boolean"
          }
        },
        url: "/repos/:owner/:repo/subscription"
      },
      setThreadSubscription: {
        method: "PUT",
        params: {
          ignored: {
            type: "boolean"
          },
          thread_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/notifications/threads/:thread_id/subscription"
      },
      starRepo: {
        method: "PUT",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/user/starred/:owner/:repo"
      },
      unstarRepo: {
        method: "DELETE",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/user/starred/:owner/:repo"
      }
    },
    apps: {
      addRepoToInstallation: {
        headers: {
          accept: "application/vnd.github.machine-man-preview+json"
        },
        method: "PUT",
        params: {
          installation_id: {
            required: !0,
            type: "integer"
          },
          repository_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/user/installations/:installation_id/repositories/:repository_id"
      },
      checkAccountIsAssociatedWithAny: {
        method: "GET",
        params: {
          account_id: {
            required: !0,
            type: "integer"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          }
        },
        url: "/marketplace_listing/accounts/:account_id"
      },
      checkAccountIsAssociatedWithAnyStubbed: {
        method: "GET",
        params: {
          account_id: {
            required: !0,
            type: "integer"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          }
        },
        url: "/marketplace_listing/stubbed/accounts/:account_id"
      },
      createContentAttachment: {
        headers: {
          accept: "application/vnd.github.corsair-preview+json"
        },
        method: "POST",
        params: {
          body: {
            required: !0,
            type: "string"
          },
          content_reference_id: {
            required: !0,
            type: "integer"
          },
          title: {
            required: !0,
            type: "string"
          }
        },
        url: "/content_references/:content_reference_id/attachments"
      },
      createFromManifest: {
        headers: {
          accept: "application/vnd.github.fury-preview+json"
        },
        method: "POST",
        params: {
          code: {
            required: !0,
            type: "string"
          }
        },
        url: "/app-manifests/:code/conversions"
      },
      createInstallationToken: {
        headers: {
          accept: "application/vnd.github.machine-man-preview+json"
        },
        method: "POST",
        params: {
          installation_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/app/installations/:installation_id/access_tokens"
      },
      findOrgInstallation: {
        headers: {
          accept: "application/vnd.github.machine-man-preview+json"
        },
        method: "GET",
        params: {
          org: {
            required: !0,
            type: "string"
          }
        },
        url: "/orgs/:org/installation"
      },
      findRepoInstallation: {
        headers: {
          accept: "application/vnd.github.machine-man-preview+json"
        },
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/installation"
      },
      findUserInstallation: {
        headers: {
          accept: "application/vnd.github.machine-man-preview+json"
        },
        method: "GET",
        params: {
          username: {
            required: !0,
            type: "string"
          }
        },
        url: "/users/:username/installation"
      },
      getAuthenticated: {
        headers: {
          accept: "application/vnd.github.machine-man-preview+json"
        },
        method: "GET",
        params: {},
        url: "/app"
      },
      getBySlug: {
        headers: {
          accept: "application/vnd.github.machine-man-preview+json"
        },
        method: "GET",
        params: {
          app_slug: {
            required: !0,
            type: "string"
          }
        },
        url: "/apps/:app_slug"
      },
      getInstallation: {
        headers: {
          accept: "application/vnd.github.machine-man-preview+json"
        },
        method: "GET",
        params: {
          installation_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/app/installations/:installation_id"
      },
      listAccountsUserOrOrgOnPlan: {
        method: "GET",
        params: {
          direction: {
            enum: ["asc", "desc"],
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          plan_id: {
            required: !0,
            type: "integer"
          },
          sort: {
            enum: ["created", "updated"],
            type: "string"
          }
        },
        url: "/marketplace_listing/plans/:plan_id/accounts"
      },
      listAccountsUserOrOrgOnPlanStubbed: {
        method: "GET",
        params: {
          direction: {
            enum: ["asc", "desc"],
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          plan_id: {
            required: !0,
            type: "integer"
          },
          sort: {
            enum: ["created", "updated"],
            type: "string"
          }
        },
        url: "/marketplace_listing/stubbed/plans/:plan_id/accounts"
      },
      listInstallationReposForAuthenticatedUser: {
        headers: {
          accept: "application/vnd.github.machine-man-preview+json"
        },
        method: "GET",
        params: {
          installation_id: {
            required: !0,
            type: "integer"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          }
        },
        url: "/user/installations/:installation_id/repositories"
      },
      listInstallations: {
        headers: {
          accept: "application/vnd.github.machine-man-preview+json"
        },
        method: "GET",
        params: {
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          }
        },
        url: "/app/installations"
      },
      listInstallationsForAuthenticatedUser: {
        headers: {
          accept: "application/vnd.github.machine-man-preview+json"
        },
        method: "GET",
        params: {
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          }
        },
        url: "/user/installations"
      },
      listMarketplacePurchasesForAuthenticatedUser: {
        method: "GET",
        params: {
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          }
        },
        url: "/user/marketplace_purchases"
      },
      listMarketplacePurchasesForAuthenticatedUserStubbed: {
        method: "GET",
        params: {
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          }
        },
        url: "/user/marketplace_purchases/stubbed"
      },
      listPlans: {
        method: "GET",
        params: {
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          }
        },
        url: "/marketplace_listing/plans"
      },
      listPlansStubbed: {
        method: "GET",
        params: {
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          }
        },
        url: "/marketplace_listing/stubbed/plans"
      },
      listRepos: {
        headers: {
          accept: "application/vnd.github.machine-man-preview+json"
        },
        method: "GET",
        params: {
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          }
        },
        url: "/installation/repositories"
      },
      removeRepoFromInstallation: {
        headers: {
          accept: "application/vnd.github.machine-man-preview+json"
        },
        method: "DELETE",
        params: {
          installation_id: {
            required: !0,
            type: "integer"
          },
          repository_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/user/installations/:installation_id/repositories/:repository_id"
      }
    },
    checks: {
      create: {
        headers: {
          accept: "application/vnd.github.antiope-preview+json"
        },
        method: "POST",
        params: {
          actions: {
            type: "object[]"
          },
          "actions[].description": {
            required: !0,
            type: "string"
          },
          "actions[].identifier": {
            required: !0,
            type: "string"
          },
          "actions[].label": {
            required: !0,
            type: "string"
          },
          completed_at: {
            type: "string"
          },
          conclusion: {
            enum: ["success", "failure", "neutral", "cancelled", "timed_out", "action_required"],
            type: "string"
          },
          details_url: {
            type: "string"
          },
          external_id: {
            type: "string"
          },
          head_sha: {
            required: !0,
            type: "string"
          },
          name: {
            required: !0,
            type: "string"
          },
          output: {
            type: "object"
          },
          "output.annotations": {
            type: "object[]"
          },
          "output.annotations[].annotation_level": {
            enum: ["notice", "warning", "failure"],
            required: !0,
            type: "string"
          },
          "output.annotations[].end_column": {
            type: "integer"
          },
          "output.annotations[].end_line": {
            required: !0,
            type: "integer"
          },
          "output.annotations[].message": {
            required: !0,
            type: "string"
          },
          "output.annotations[].path": {
            required: !0,
            type: "string"
          },
          "output.annotations[].raw_details": {
            type: "string"
          },
          "output.annotations[].start_column": {
            type: "integer"
          },
          "output.annotations[].start_line": {
            required: !0,
            type: "integer"
          },
          "output.annotations[].title": {
            type: "string"
          },
          "output.images": {
            type: "object[]"
          },
          "output.images[].alt": {
            required: !0,
            type: "string"
          },
          "output.images[].caption": {
            type: "string"
          },
          "output.images[].image_url": {
            required: !0,
            type: "string"
          },
          "output.summary": {
            required: !0,
            type: "string"
          },
          "output.text": {
            type: "string"
          },
          "output.title": {
            required: !0,
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          started_at: {
            type: "string"
          },
          status: {
            enum: ["queued", "in_progress", "completed"],
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/check-runs"
      },
      createSuite: {
        headers: {
          accept: "application/vnd.github.antiope-preview+json"
        },
        method: "POST",
        params: {
          head_sha: {
            required: !0,
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/check-suites"
      },
      get: {
        headers: {
          accept: "application/vnd.github.antiope-preview+json"
        },
        method: "GET",
        params: {
          check_run_id: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/check-runs/:check_run_id"
      },
      getSuite: {
        headers: {
          accept: "application/vnd.github.antiope-preview+json"
        },
        method: "GET",
        params: {
          check_suite_id: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/check-suites/:check_suite_id"
      },
      listAnnotations: {
        headers: {
          accept: "application/vnd.github.antiope-preview+json"
        },
        method: "GET",
        params: {
          check_run_id: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/check-runs/:check_run_id/annotations"
      },
      listForRef: {
        headers: {
          accept: "application/vnd.github.antiope-preview+json"
        },
        method: "GET",
        params: {
          check_name: {
            type: "string"
          },
          filter: {
            enum: ["latest", "all"],
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          ref: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          status: {
            enum: ["queued", "in_progress", "completed"],
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/commits/:ref/check-runs"
      },
      listForSuite: {
        headers: {
          accept: "application/vnd.github.antiope-preview+json"
        },
        method: "GET",
        params: {
          check_name: {
            type: "string"
          },
          check_suite_id: {
            required: !0,
            type: "integer"
          },
          filter: {
            enum: ["latest", "all"],
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          repo: {
            required: !0,
            type: "string"
          },
          status: {
            enum: ["queued", "in_progress", "completed"],
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/check-suites/:check_suite_id/check-runs"
      },
      listSuitesForRef: {
        headers: {
          accept: "application/vnd.github.antiope-preview+json"
        },
        method: "GET",
        params: {
          app_id: {
            type: "integer"
          },
          check_name: {
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          ref: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/commits/:ref/check-suites"
      },
      rerequestSuite: {
        headers: {
          accept: "application/vnd.github.antiope-preview+json"
        },
        method: "POST",
        params: {
          check_suite_id: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/check-suites/:check_suite_id/rerequest"
      },
      setSuitesPreferences: {
        headers: {
          accept: "application/vnd.github.antiope-preview+json"
        },
        method: "PATCH",
        params: {
          auto_trigger_checks: {
            type: "object[]"
          },
          "auto_trigger_checks[].app_id": {
            required: !0,
            type: "integer"
          },
          "auto_trigger_checks[].setting": {
            required: !0,
            type: "boolean"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/check-suites/preferences"
      },
      update: {
        headers: {
          accept: "application/vnd.github.antiope-preview+json"
        },
        method: "PATCH",
        params: {
          actions: {
            type: "object[]"
          },
          "actions[].description": {
            required: !0,
            type: "string"
          },
          "actions[].identifier": {
            required: !0,
            type: "string"
          },
          "actions[].label": {
            required: !0,
            type: "string"
          },
          check_run_id: {
            required: !0,
            type: "integer"
          },
          completed_at: {
            type: "string"
          },
          conclusion: {
            enum: ["success", "failure", "neutral", "cancelled", "timed_out", "action_required"],
            type: "string"
          },
          details_url: {
            type: "string"
          },
          external_id: {
            type: "string"
          },
          name: {
            type: "string"
          },
          output: {
            type: "object"
          },
          "output.annotations": {
            type: "object[]"
          },
          "output.annotations[].annotation_level": {
            enum: ["notice", "warning", "failure"],
            required: !0,
            type: "string"
          },
          "output.annotations[].end_column": {
            type: "integer"
          },
          "output.annotations[].end_line": {
            required: !0,
            type: "integer"
          },
          "output.annotations[].message": {
            required: !0,
            type: "string"
          },
          "output.annotations[].path": {
            required: !0,
            type: "string"
          },
          "output.annotations[].raw_details": {
            type: "string"
          },
          "output.annotations[].start_column": {
            type: "integer"
          },
          "output.annotations[].start_line": {
            required: !0,
            type: "integer"
          },
          "output.annotations[].title": {
            type: "string"
          },
          "output.images": {
            type: "object[]"
          },
          "output.images[].alt": {
            required: !0,
            type: "string"
          },
          "output.images[].caption": {
            type: "string"
          },
          "output.images[].image_url": {
            required: !0,
            type: "string"
          },
          "output.summary": {
            required: !0,
            type: "string"
          },
          "output.text": {
            type: "string"
          },
          "output.title": {
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          started_at: {
            type: "string"
          },
          status: {
            enum: ["queued", "in_progress", "completed"],
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/check-runs/:check_run_id"
      }
    },
    codesOfConduct: {
      getConductCode: {
        headers: {
          accept: "application/vnd.github.scarlet-witch-preview+json"
        },
        method: "GET",
        params: {
          key: {
            required: !0,
            type: "string"
          }
        },
        url: "/codes_of_conduct/:key"
      },
      getForRepo: {
        headers: {
          accept: "application/vnd.github.scarlet-witch-preview+json"
        },
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/community/code_of_conduct"
      },
      listConductCodes: {
        headers: {
          accept: "application/vnd.github.scarlet-witch-preview+json"
        },
        method: "GET",
        params: {},
        url: "/codes_of_conduct"
      }
    },
    emojis: {
      get: {
        method: "GET",
        params: {},
        url: "/emojis"
      }
    },
    gists: {
      checkIsStarred: {
        method: "GET",
        params: {
          gist_id: {
            required: !0,
            type: "string"
          }
        },
        url: "/gists/:gist_id/star"
      },
      create: {
        method: "POST",
        params: {
          description: {
            type: "string"
          },
          files: {
            required: !0,
            type: "object"
          },
          "files.content": {
            type: "string"
          },
          public: {
            type: "boolean"
          }
        },
        url: "/gists"
      },
      createComment: {
        method: "POST",
        params: {
          body: {
            required: !0,
            type: "string"
          },
          gist_id: {
            required: !0,
            type: "string"
          }
        },
        url: "/gists/:gist_id/comments"
      },
      delete: {
        method: "DELETE",
        params: {
          gist_id: {
            required: !0,
            type: "string"
          }
        },
        url: "/gists/:gist_id"
      },
      deleteComment: {
        method: "DELETE",
        params: {
          comment_id: {
            required: !0,
            type: "integer"
          },
          gist_id: {
            required: !0,
            type: "string"
          }
        },
        url: "/gists/:gist_id/comments/:comment_id"
      },
      fork: {
        method: "POST",
        params: {
          gist_id: {
            required: !0,
            type: "string"
          }
        },
        url: "/gists/:gist_id/forks"
      },
      get: {
        method: "GET",
        params: {
          gist_id: {
            required: !0,
            type: "string"
          }
        },
        url: "/gists/:gist_id"
      },
      getComment: {
        method: "GET",
        params: {
          comment_id: {
            required: !0,
            type: "integer"
          },
          gist_id: {
            required: !0,
            type: "string"
          }
        },
        url: "/gists/:gist_id/comments/:comment_id"
      },
      getRevision: {
        method: "GET",
        params: {
          gist_id: {
            required: !0,
            type: "string"
          },
          sha: {
            required: !0,
            type: "string"
          }
        },
        url: "/gists/:gist_id/:sha"
      },
      list: {
        method: "GET",
        params: {
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          since: {
            type: "string"
          }
        },
        url: "/gists"
      },
      listComments: {
        method: "GET",
        params: {
          gist_id: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          }
        },
        url: "/gists/:gist_id/comments"
      },
      listCommits: {
        method: "GET",
        params: {
          gist_id: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          }
        },
        url: "/gists/:gist_id/commits"
      },
      listForks: {
        method: "GET",
        params: {
          gist_id: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          }
        },
        url: "/gists/:gist_id/forks"
      },
      listPublic: {
        method: "GET",
        params: {
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          since: {
            type: "string"
          }
        },
        url: "/gists/public"
      },
      listPublicForUser: {
        method: "GET",
        params: {
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          since: {
            type: "string"
          },
          username: {
            required: !0,
            type: "string"
          }
        },
        url: "/users/:username/gists"
      },
      listStarred: {
        method: "GET",
        params: {
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          since: {
            type: "string"
          }
        },
        url: "/gists/starred"
      },
      star: {
        method: "PUT",
        params: {
          gist_id: {
            required: !0,
            type: "string"
          }
        },
        url: "/gists/:gist_id/star"
      },
      unstar: {
        method: "DELETE",
        params: {
          gist_id: {
            required: !0,
            type: "string"
          }
        },
        url: "/gists/:gist_id/star"
      },
      update: {
        method: "PATCH",
        params: {
          description: {
            type: "string"
          },
          files: {
            type: "object"
          },
          "files.content": {
            type: "string"
          },
          "files.filename": {
            type: "string"
          },
          gist_id: {
            required: !0,
            type: "string"
          }
        },
        url: "/gists/:gist_id"
      },
      updateComment: {
        method: "PATCH",
        params: {
          body: {
            required: !0,
            type: "string"
          },
          comment_id: {
            required: !0,
            type: "integer"
          },
          gist_id: {
            required: !0,
            type: "string"
          }
        },
        url: "/gists/:gist_id/comments/:comment_id"
      }
    },
    git: {
      createBlob: {
        method: "POST",
        params: {
          content: {
            required: !0,
            type: "string"
          },
          encoding: {
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/git/blobs"
      },
      createCommit: {
        method: "POST",
        params: {
          author: {
            type: "object"
          },
          "author.date": {
            type: "string"
          },
          "author.email": {
            type: "string"
          },
          "author.name": {
            type: "string"
          },
          committer: {
            type: "object"
          },
          "committer.date": {
            type: "string"
          },
          "committer.email": {
            type: "string"
          },
          "committer.name": {
            type: "string"
          },
          message: {
            required: !0,
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          parents: {
            required: !0,
            type: "string[]"
          },
          repo: {
            required: !0,
            type: "string"
          },
          signature: {
            type: "string"
          },
          tree: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/git/commits"
      },
      createRef: {
        method: "POST",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          ref: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          sha: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/git/refs"
      },
      createTag: {
        method: "POST",
        params: {
          message: {
            required: !0,
            type: "string"
          },
          object: {
            required: !0,
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          tag: {
            required: !0,
            type: "string"
          },
          tagger: {
            type: "object"
          },
          "tagger.date": {
            type: "string"
          },
          "tagger.email": {
            type: "string"
          },
          "tagger.name": {
            type: "string"
          },
          type: {
            enum: ["commit", "tree", "blob"],
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/git/tags"
      },
      createTree: {
        method: "POST",
        params: {
          base_tree: {
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          tree: {
            required: !0,
            type: "object[]"
          },
          "tree[].content": {
            type: "string"
          },
          "tree[].mode": {
            enum: ["100644", "100755", "040000", "160000", "120000"],
            type: "string"
          },
          "tree[].path": {
            type: "string"
          },
          "tree[].sha": {
            type: "string"
          },
          "tree[].type": {
            enum: ["blob", "tree", "commit"],
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/git/trees"
      },
      deleteRef: {
        method: "DELETE",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          ref: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/git/refs/:ref"
      },
      getBlob: {
        method: "GET",
        params: {
          file_sha: {
            required: !0,
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/git/blobs/:file_sha"
      },
      getCommit: {
        method: "GET",
        params: {
          commit_sha: {
            required: !0,
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/git/commits/:commit_sha"
      },
      getRef: {
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          ref: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/git/refs/:ref"
      },
      getTag: {
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          tag_sha: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/git/tags/:tag_sha"
      },
      getTree: {
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          recursive: {
            enum: [1],
            type: "integer"
          },
          repo: {
            required: !0,
            type: "string"
          },
          tree_sha: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/git/trees/:tree_sha"
      },
      listRefs: {
        method: "GET",
        params: {
          namespace: {
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/git/refs/:namespace"
      },
      updateRef: {
        method: "PATCH",
        params: {
          force: {
            type: "boolean"
          },
          owner: {
            required: !0,
            type: "string"
          },
          ref: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          sha: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/git/refs/:ref"
      }
    },
    gitignore: {
      getTemplate: {
        method: "GET",
        params: {
          name: {
            required: !0,
            type: "string"
          }
        },
        url: "/gitignore/templates/:name"
      },
      listTemplates: {
        method: "GET",
        params: {},
        url: "/gitignore/templates"
      }
    },
    interactions: {
      addOrUpdateRestrictionsForOrg: {
        headers: {
          accept: "application/vnd.github.sombra-preview+json"
        },
        method: "PUT",
        params: {
          limit: {
            enum: ["existing_users", "contributors_only", "collaborators_only"],
            required: !0,
            type: "string"
          },
          org: {
            required: !0,
            type: "string"
          }
        },
        url: "/orgs/:org/interaction-limits"
      },
      addOrUpdateRestrictionsForRepo: {
        headers: {
          accept: "application/vnd.github.sombra-preview+json"
        },
        method: "PUT",
        params: {
          limit: {
            enum: ["existing_users", "contributors_only", "collaborators_only"],
            required: !0,
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/interaction-limits"
      },
      getRestrictionsForOrg: {
        headers: {
          accept: "application/vnd.github.sombra-preview+json"
        },
        method: "GET",
        params: {
          org: {
            required: !0,
            type: "string"
          }
        },
        url: "/orgs/:org/interaction-limits"
      },
      getRestrictionsForRepo: {
        headers: {
          accept: "application/vnd.github.sombra-preview+json"
        },
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/interaction-limits"
      },
      removeRestrictionsForOrg: {
        headers: {
          accept: "application/vnd.github.sombra-preview+json"
        },
        method: "DELETE",
        params: {
          org: {
            required: !0,
            type: "string"
          }
        },
        url: "/orgs/:org/interaction-limits"
      },
      removeRestrictionsForRepo: {
        headers: {
          accept: "application/vnd.github.sombra-preview+json"
        },
        method: "DELETE",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/interaction-limits"
      }
    },
    issues: {
      addAssignees: {
        method: "POST",
        params: {
          assignees: {
            type: "string[]"
          },
          number: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/issues/:number/assignees"
      },
      addLabels: {
        method: "POST",
        params: {
          labels: {
            required: !0,
            type: "string[]"
          },
          number: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/issues/:number/labels"
      },
      checkAssignee: {
        method: "GET",
        params: {
          assignee: {
            required: !0,
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/assignees/:assignee"
      },
      create: {
        method: "POST",
        params: {
          assignee: {
            type: "string"
          },
          assignees: {
            type: "string[]"
          },
          body: {
            type: "string"
          },
          labels: {
            type: "string[]"
          },
          milestone: {
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          title: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/issues"
      },
      createComment: {
        method: "POST",
        params: {
          body: {
            required: !0,
            type: "string"
          },
          number: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/issues/:number/comments"
      },
      createLabel: {
        method: "POST",
        params: {
          color: {
            required: !0,
            type: "string"
          },
          description: {
            type: "string"
          },
          name: {
            required: !0,
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/labels"
      },
      createMilestone: {
        method: "POST",
        params: {
          description: {
            type: "string"
          },
          due_on: {
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          state: {
            enum: ["open", "closed"],
            type: "string"
          },
          title: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/milestones"
      },
      deleteComment: {
        method: "DELETE",
        params: {
          comment_id: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/issues/comments/:comment_id"
      },
      deleteLabel: {
        method: "DELETE",
        params: {
          name: {
            required: !0,
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/labels/:name"
      },
      deleteMilestone: {
        method: "DELETE",
        params: {
          number: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/milestones/:number"
      },
      get: {
        method: "GET",
        params: {
          number: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/issues/:number"
      },
      getComment: {
        method: "GET",
        params: {
          comment_id: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/issues/comments/:comment_id"
      },
      getEvent: {
        method: "GET",
        params: {
          event_id: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/issues/events/:event_id"
      },
      getLabel: {
        method: "GET",
        params: {
          name: {
            required: !0,
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/labels/:name"
      },
      getMilestone: {
        method: "GET",
        params: {
          number: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/milestones/:number"
      },
      list: {
        method: "GET",
        params: {
          direction: {
            enum: ["asc", "desc"],
            type: "string"
          },
          filter: {
            enum: ["assigned", "created", "mentioned", "subscribed", "all"],
            type: "string"
          },
          labels: {
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          since: {
            type: "string"
          },
          sort: {
            enum: ["created", "updated", "comments"],
            type: "string"
          },
          state: {
            enum: ["open", "closed", "all"],
            type: "string"
          }
        },
        url: "/issues"
      },
      listAssignees: {
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/assignees"
      },
      listComments: {
        method: "GET",
        params: {
          number: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          repo: {
            required: !0,
            type: "string"
          },
          since: {
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/issues/:number/comments"
      },
      listCommentsForRepo: {
        method: "GET",
        params: {
          direction: {
            enum: ["asc", "desc"],
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          since: {
            type: "string"
          },
          sort: {
            enum: ["created", "updated"],
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/issues/comments"
      },
      listEvents: {
        method: "GET",
        params: {
          number: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/issues/:number/events"
      },
      listEventsForRepo: {
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/issues/events"
      },
      listEventsForTimeline: {
        headers: {
          accept: "application/vnd.github.mockingbird-preview+json"
        },
        method: "GET",
        params: {
          number: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/issues/:number/timeline"
      },
      listForAuthenticatedUser: {
        method: "GET",
        params: {
          direction: {
            enum: ["asc", "desc"],
            type: "string"
          },
          filter: {
            enum: ["assigned", "created", "mentioned", "subscribed", "all"],
            type: "string"
          },
          labels: {
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          since: {
            type: "string"
          },
          sort: {
            enum: ["created", "updated", "comments"],
            type: "string"
          },
          state: {
            enum: ["open", "closed", "all"],
            type: "string"
          }
        },
        url: "/user/issues"
      },
      listForOrg: {
        method: "GET",
        params: {
          direction: {
            enum: ["asc", "desc"],
            type: "string"
          },
          filter: {
            enum: ["assigned", "created", "mentioned", "subscribed", "all"],
            type: "string"
          },
          labels: {
            type: "string"
          },
          org: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          since: {
            type: "string"
          },
          sort: {
            enum: ["created", "updated", "comments"],
            type: "string"
          },
          state: {
            enum: ["open", "closed", "all"],
            type: "string"
          }
        },
        url: "/orgs/:org/issues"
      },
      listForRepo: {
        method: "GET",
        params: {
          assignee: {
            type: "string"
          },
          creator: {
            type: "string"
          },
          direction: {
            enum: ["asc", "desc"],
            type: "string"
          },
          labels: {
            type: "string"
          },
          mentioned: {
            type: "string"
          },
          milestone: {
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          repo: {
            required: !0,
            type: "string"
          },
          since: {
            type: "string"
          },
          sort: {
            enum: ["created", "updated", "comments"],
            type: "string"
          },
          state: {
            enum: ["open", "closed", "all"],
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/issues"
      },
      listLabelsForMilestone: {
        method: "GET",
        params: {
          number: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/milestones/:number/labels"
      },
      listLabelsForRepo: {
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/labels"
      },
      listLabelsOnIssue: {
        method: "GET",
        params: {
          number: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/issues/:number/labels"
      },
      listMilestonesForRepo: {
        method: "GET",
        params: {
          direction: {
            enum: ["asc", "desc"],
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          repo: {
            required: !0,
            type: "string"
          },
          sort: {
            enum: ["due_on", "completeness"],
            type: "string"
          },
          state: {
            enum: ["open", "closed", "all"],
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/milestones"
      },
      lock: {
        method: "PUT",
        params: {
          lock_reason: {
            enum: ["off-topic", "too heated", "resolved", "spam"],
            type: "string"
          },
          number: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/issues/:number/lock"
      },
      removeAssignees: {
        method: "DELETE",
        params: {
          assignees: {
            type: "string[]"
          },
          number: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/issues/:number/assignees"
      },
      removeLabel: {
        method: "DELETE",
        params: {
          name: {
            required: !0,
            type: "string"
          },
          number: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/issues/:number/labels/:name"
      },
      removeLabels: {
        method: "DELETE",
        params: {
          number: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/issues/:number/labels"
      },
      replaceLabels: {
        method: "PUT",
        params: {
          labels: {
            type: "string[]"
          },
          number: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/issues/:number/labels"
      },
      unlock: {
        method: "DELETE",
        params: {
          number: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/issues/:number/lock"
      },
      update: {
        method: "PATCH",
        params: {
          assignee: {
            type: "string"
          },
          assignees: {
            type: "string[]"
          },
          body: {
            type: "string"
          },
          labels: {
            type: "string[]"
          },
          milestone: {
            allowNull: !0,
            type: "integer"
          },
          number: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          state: {
            enum: ["open", "closed"],
            type: "string"
          },
          title: {
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/issues/:number"
      },
      updateComment: {
        method: "PATCH",
        params: {
          body: {
            required: !0,
            type: "string"
          },
          comment_id: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/issues/comments/:comment_id"
      },
      updateLabel: {
        method: "PATCH",
        params: {
          color: {
            type: "string"
          },
          current_name: {
            required: !0,
            type: "string"
          },
          description: {
            type: "string"
          },
          name: {
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/labels/:current_name"
      },
      updateMilestone: {
        method: "PATCH",
        params: {
          description: {
            type: "string"
          },
          due_on: {
            type: "string"
          },
          number: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          state: {
            enum: ["open", "closed"],
            type: "string"
          },
          title: {
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/milestones/:number"
      }
    },
    licenses: {
      get: {
        method: "GET",
        params: {
          license: {
            required: !0,
            type: "string"
          }
        },
        url: "/licenses/:license"
      },
      getForRepo: {
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/license"
      },
      list: {
        deprecated: "octokit.licenses.list() has been renamed to octokit.licenses.listCommonlyUsed() (2019-03-05)",
        method: "GET",
        params: {},
        url: "/licenses"
      },
      listCommonlyUsed: {
        method: "GET",
        params: {},
        url: "/licenses"
      }
    },
    markdown: {
      render: {
        method: "POST",
        params: {
          context: {
            type: "string"
          },
          mode: {
            enum: ["markdown", "gfm"],
            type: "string"
          },
          text: {
            required: !0,
            type: "string"
          }
        },
        url: "/markdown"
      },
      renderRaw: {
        headers: {
          "content-type": "text/plain; charset=utf-8"
        },
        method: "POST",
        params: {
          data: {
            mapTo: "data",
            required: !0,
            type: "string"
          }
        },
        url: "/markdown/raw"
      }
    },
    meta: {
      get: {
        method: "GET",
        params: {},
        url: "/meta"
      }
    },
    migrations: {
      cancelImport: {
        headers: {
          accept: "application/vnd.github.barred-rock-preview+json"
        },
        method: "DELETE",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/import"
      },
      deleteArchiveForAuthenticatedUser: {
        headers: {
          accept: "application/vnd.github.wyandotte-preview+json"
        },
        method: "DELETE",
        params: {
          migration_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/user/migrations/:migration_id/archive"
      },
      deleteArchiveForOrg: {
        headers: {
          accept: "application/vnd.github.wyandotte-preview+json"
        },
        method: "DELETE",
        params: {
          migration_id: {
            required: !0,
            type: "integer"
          },
          org: {
            required: !0,
            type: "string"
          }
        },
        url: "/orgs/:org/migrations/:migration_id/archive"
      },
      getArchiveForAuthenticatedUser: {
        headers: {
          accept: "application/vnd.github.wyandotte-preview+json"
        },
        method: "GET",
        params: {
          migration_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/user/migrations/:migration_id/archive"
      },
      getArchiveForOrg: {
        headers: {
          accept: "application/vnd.github.wyandotte-preview+json"
        },
        method: "GET",
        params: {
          migration_id: {
            required: !0,
            type: "integer"
          },
          org: {
            required: !0,
            type: "string"
          }
        },
        url: "/orgs/:org/migrations/:migration_id/archive"
      },
      getCommitAuthors: {
        headers: {
          accept: "application/vnd.github.barred-rock-preview+json"
        },
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          since: {
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/import/authors"
      },
      getImportProgress: {
        headers: {
          accept: "application/vnd.github.barred-rock-preview+json"
        },
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/import"
      },
      getLargeFiles: {
        headers: {
          accept: "application/vnd.github.barred-rock-preview+json"
        },
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/import/large_files"
      },
      getStatusForAuthenticatedUser: {
        headers: {
          accept: "application/vnd.github.wyandotte-preview+json"
        },
        method: "GET",
        params: {
          migration_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/user/migrations/:migration_id"
      },
      getStatusForOrg: {
        headers: {
          accept: "application/vnd.github.wyandotte-preview+json"
        },
        method: "GET",
        params: {
          migration_id: {
            required: !0,
            type: "integer"
          },
          org: {
            required: !0,
            type: "string"
          }
        },
        url: "/orgs/:org/migrations/:migration_id"
      },
      listForAuthenticatedUser: {
        headers: {
          accept: "application/vnd.github.wyandotte-preview+json"
        },
        method: "GET",
        params: {
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          }
        },
        url: "/user/migrations"
      },
      listForOrg: {
        headers: {
          accept: "application/vnd.github.wyandotte-preview+json"
        },
        method: "GET",
        params: {
          org: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          }
        },
        url: "/orgs/:org/migrations"
      },
      mapCommitAuthor: {
        headers: {
          accept: "application/vnd.github.barred-rock-preview+json"
        },
        method: "PATCH",
        params: {
          author_id: {
            required: !0,
            type: "integer"
          },
          email: {
            type: "string"
          },
          name: {
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/import/authors/:author_id"
      },
      setLfsPreference: {
        headers: {
          accept: "application/vnd.github.barred-rock-preview+json"
        },
        method: "PATCH",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          use_lfs: {
            enum: ["opt_in", "opt_out"],
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/import/lfs"
      },
      startForAuthenticatedUser: {
        method: "POST",
        params: {
          exclude_attachments: {
            type: "boolean"
          },
          lock_repositories: {
            type: "boolean"
          },
          repositories: {
            required: !0,
            type: "string[]"
          }
        },
        url: "/user/migrations"
      },
      startForOrg: {
        method: "POST",
        params: {
          exclude_attachments: {
            type: "boolean"
          },
          lock_repositories: {
            type: "boolean"
          },
          org: {
            required: !0,
            type: "string"
          },
          repositories: {
            required: !0,
            type: "string[]"
          }
        },
        url: "/orgs/:org/migrations"
      },
      startImport: {
        headers: {
          accept: "application/vnd.github.barred-rock-preview+json"
        },
        method: "PUT",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          tfvc_project: {
            type: "string"
          },
          vcs: {
            enum: ["subversion", "git", "mercurial", "tfvc"],
            type: "string"
          },
          vcs_password: {
            type: "string"
          },
          vcs_url: {
            required: !0,
            type: "string"
          },
          vcs_username: {
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/import"
      },
      unlockRepoForAuthenticatedUser: {
        headers: {
          accept: "application/vnd.github.wyandotte-preview+json"
        },
        method: "DELETE",
        params: {
          migration_id: {
            required: !0,
            type: "integer"
          },
          repo_name: {
            required: !0,
            type: "string"
          }
        },
        url: "/user/migrations/:migration_id/repos/:repo_name/lock"
      },
      unlockRepoForOrg: {
        headers: {
          accept: "application/vnd.github.wyandotte-preview+json"
        },
        method: "DELETE",
        params: {
          migration_id: {
            required: !0,
            type: "integer"
          },
          org: {
            required: !0,
            type: "string"
          },
          repo_name: {
            required: !0,
            type: "string"
          }
        },
        url: "/orgs/:org/migrations/:migration_id/repos/:repo_name/lock"
      },
      updateImport: {
        headers: {
          accept: "application/vnd.github.barred-rock-preview+json"
        },
        method: "PATCH",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          vcs_password: {
            type: "string"
          },
          vcs_username: {
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/import"
      }
    },
    oauthAuthorizations: {
      checkAuthorization: {
        method: "GET",
        params: {
          access_token: {
            required: !0,
            type: "string"
          },
          client_id: {
            required: !0,
            type: "string"
          }
        },
        url: "/applications/:client_id/tokens/:access_token"
      },
      createAuthorization: {
        method: "POST",
        params: {
          client_id: {
            type: "string"
          },
          client_secret: {
            type: "string"
          },
          fingerprint: {
            type: "string"
          },
          note: {
            required: !0,
            type: "string"
          },
          note_url: {
            type: "string"
          },
          scopes: {
            type: "string[]"
          }
        },
        url: "/authorizations"
      },
      deleteAuthorization: {
        method: "DELETE",
        params: {
          authorization_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/authorizations/:authorization_id"
      },
      deleteGrant: {
        method: "DELETE",
        params: {
          grant_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/applications/grants/:grant_id"
      },
      getAuthorization: {
        method: "GET",
        params: {
          authorization_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/authorizations/:authorization_id"
      },
      getGrant: {
        method: "GET",
        params: {
          grant_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/applications/grants/:grant_id"
      },
      getOrCreateAuthorizationForApp: {
        method: "PUT",
        params: {
          client_id: {
            required: !0,
            type: "string"
          },
          client_secret: {
            required: !0,
            type: "string"
          },
          fingerprint: {
            type: "string"
          },
          note: {
            type: "string"
          },
          note_url: {
            type: "string"
          },
          scopes: {
            type: "string[]"
          }
        },
        url: "/authorizations/clients/:client_id"
      },
      getOrCreateAuthorizationForAppAndFingerprint: {
        method: "PUT",
        params: {
          client_id: {
            required: !0,
            type: "string"
          },
          client_secret: {
            required: !0,
            type: "string"
          },
          fingerprint: {
            required: !0,
            type: "string"
          },
          note: {
            type: "string"
          },
          note_url: {
            type: "string"
          },
          scopes: {
            type: "string[]"
          }
        },
        url: "/authorizations/clients/:client_id/:fingerprint"
      },
      getOrCreateAuthorizationForAppFingerprint: {
        deprecated: "octokit.oauthAuthorizations.getOrCreateAuthorizationForAppFingerprint() has been renamed to octokit.oauthAuthorizations.getOrCreateAuthorizationForAppAndFingerprint() (2018-12-27)",
        method: "PUT",
        params: {
          client_id: {
            required: !0,
            type: "string"
          },
          client_secret: {
            required: !0,
            type: "string"
          },
          fingerprint: {
            required: !0,
            type: "string"
          },
          note: {
            type: "string"
          },
          note_url: {
            type: "string"
          },
          scopes: {
            type: "string[]"
          }
        },
        url: "/authorizations/clients/:client_id/:fingerprint"
      },
      listAuthorizations: {
        method: "GET",
        params: {
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          }
        },
        url: "/authorizations"
      },
      listGrants: {
        method: "GET",
        params: {
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          }
        },
        url: "/applications/grants"
      },
      resetAuthorization: {
        method: "POST",
        params: {
          access_token: {
            required: !0,
            type: "string"
          },
          client_id: {
            required: !0,
            type: "string"
          }
        },
        url: "/applications/:client_id/tokens/:access_token"
      },
      revokeAuthorizationForApplication: {
        method: "DELETE",
        params: {
          access_token: {
            required: !0,
            type: "string"
          },
          client_id: {
            required: !0,
            type: "string"
          }
        },
        url: "/applications/:client_id/tokens/:access_token"
      },
      revokeGrantForApplication: {
        method: "DELETE",
        params: {
          access_token: {
            required: !0,
            type: "string"
          },
          client_id: {
            required: !0,
            type: "string"
          }
        },
        url: "/applications/:client_id/grants/:access_token"
      },
      updateAuthorization: {
        method: "PATCH",
        params: {
          add_scopes: {
            type: "string[]"
          },
          authorization_id: {
            required: !0,
            type: "integer"
          },
          fingerprint: {
            type: "string"
          },
          note: {
            type: "string"
          },
          note_url: {
            type: "string"
          },
          remove_scopes: {
            type: "string[]"
          },
          scopes: {
            type: "string[]"
          }
        },
        url: "/authorizations/:authorization_id"
      }
    },
    orgs: {
      addOrUpdateMembership: {
        method: "PUT",
        params: {
          org: {
            required: !0,
            type: "string"
          },
          role: {
            enum: ["admin", "member"],
            type: "string"
          },
          username: {
            required: !0,
            type: "string"
          }
        },
        url: "/orgs/:org/memberships/:username"
      },
      blockUser: {
        method: "PUT",
        params: {
          org: {
            required: !0,
            type: "string"
          },
          username: {
            required: !0,
            type: "string"
          }
        },
        url: "/orgs/:org/blocks/:username"
      },
      checkBlockedUser: {
        method: "GET",
        params: {
          org: {
            required: !0,
            type: "string"
          },
          username: {
            required: !0,
            type: "string"
          }
        },
        url: "/orgs/:org/blocks/:username"
      },
      checkMembership: {
        method: "GET",
        params: {
          org: {
            required: !0,
            type: "string"
          },
          username: {
            required: !0,
            type: "string"
          }
        },
        url: "/orgs/:org/members/:username"
      },
      checkPublicMembership: {
        method: "GET",
        params: {
          org: {
            required: !0,
            type: "string"
          },
          username: {
            required: !0,
            type: "string"
          }
        },
        url: "/orgs/:org/public_members/:username"
      },
      concealMembership: {
        method: "DELETE",
        params: {
          org: {
            required: !0,
            type: "string"
          },
          username: {
            required: !0,
            type: "string"
          }
        },
        url: "/orgs/:org/public_members/:username"
      },
      convertMemberToOutsideCollaborator: {
        method: "PUT",
        params: {
          org: {
            required: !0,
            type: "string"
          },
          username: {
            required: !0,
            type: "string"
          }
        },
        url: "/orgs/:org/outside_collaborators/:username"
      },
      createHook: {
        method: "POST",
        params: {
          active: {
            type: "boolean"
          },
          config: {
            required: !0,
            type: "object"
          },
          "config.content_type": {
            type: "string"
          },
          "config.insecure_ssl": {
            type: "string"
          },
          "config.secret": {
            type: "string"
          },
          "config.url": {
            required: !0,
            type: "string"
          },
          events: {
            type: "string[]"
          },
          name: {
            required: !0,
            type: "string"
          },
          org: {
            required: !0,
            type: "string"
          }
        },
        url: "/orgs/:org/hooks"
      },
      createInvitation: {
        method: "POST",
        params: {
          email: {
            type: "string"
          },
          invitee_id: {
            type: "integer"
          },
          org: {
            required: !0,
            type: "string"
          },
          role: {
            enum: ["admin", "direct_member", "billing_manager"],
            type: "string"
          },
          team_ids: {
            type: "integer[]"
          }
        },
        url: "/orgs/:org/invitations"
      },
      deleteHook: {
        method: "DELETE",
        params: {
          hook_id: {
            required: !0,
            type: "integer"
          },
          org: {
            required: !0,
            type: "string"
          }
        },
        url: "/orgs/:org/hooks/:hook_id"
      },
      get: {
        method: "GET",
        params: {
          org: {
            required: !0,
            type: "string"
          }
        },
        url: "/orgs/:org"
      },
      getHook: {
        method: "GET",
        params: {
          hook_id: {
            required: !0,
            type: "integer"
          },
          org: {
            required: !0,
            type: "string"
          }
        },
        url: "/orgs/:org/hooks/:hook_id"
      },
      getMembership: {
        method: "GET",
        params: {
          org: {
            required: !0,
            type: "string"
          },
          username: {
            required: !0,
            type: "string"
          }
        },
        url: "/orgs/:org/memberships/:username"
      },
      getMembershipForAuthenticatedUser: {
        method: "GET",
        params: {
          org: {
            required: !0,
            type: "string"
          }
        },
        url: "/user/memberships/orgs/:org"
      },
      list: {
        method: "GET",
        params: {
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          since: {
            type: "string"
          }
        },
        url: "/organizations"
      },
      listBlockedUsers: {
        method: "GET",
        params: {
          org: {
            required: !0,
            type: "string"
          }
        },
        url: "/orgs/:org/blocks"
      },
      listForAuthenticatedUser: {
        method: "GET",
        params: {
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          }
        },
        url: "/user/orgs"
      },
      listForUser: {
        method: "GET",
        params: {
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          username: {
            required: !0,
            type: "string"
          }
        },
        url: "/users/:username/orgs"
      },
      listHooks: {
        method: "GET",
        params: {
          org: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          }
        },
        url: "/orgs/:org/hooks"
      },
      listInvitationTeams: {
        method: "GET",
        params: {
          invitation_id: {
            required: !0,
            type: "integer"
          },
          org: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          }
        },
        url: "/orgs/:org/invitations/:invitation_id/teams"
      },
      listMembers: {
        method: "GET",
        params: {
          filter: {
            enum: ["2fa_disabled", "all"],
            type: "string"
          },
          org: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          role: {
            enum: ["all", "admin", "member"],
            type: "string"
          }
        },
        url: "/orgs/:org/members"
      },
      listMemberships: {
        method: "GET",
        params: {
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          state: {
            enum: ["active", "pending"],
            type: "string"
          }
        },
        url: "/user/memberships/orgs"
      },
      listOutsideCollaborators: {
        method: "GET",
        params: {
          filter: {
            enum: ["2fa_disabled", "all"],
            type: "string"
          },
          org: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          }
        },
        url: "/orgs/:org/outside_collaborators"
      },
      listPendingInvitations: {
        method: "GET",
        params: {
          org: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          }
        },
        url: "/orgs/:org/invitations"
      },
      listPublicMembers: {
        method: "GET",
        params: {
          org: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          }
        },
        url: "/orgs/:org/public_members"
      },
      pingHook: {
        method: "POST",
        params: {
          hook_id: {
            required: !0,
            type: "integer"
          },
          org: {
            required: !0,
            type: "string"
          }
        },
        url: "/orgs/:org/hooks/:hook_id/pings"
      },
      publicizeMembership: {
        method: "PUT",
        params: {
          org: {
            required: !0,
            type: "string"
          },
          username: {
            required: !0,
            type: "string"
          }
        },
        url: "/orgs/:org/public_members/:username"
      },
      removeMember: {
        method: "DELETE",
        params: {
          org: {
            required: !0,
            type: "string"
          },
          username: {
            required: !0,
            type: "string"
          }
        },
        url: "/orgs/:org/members/:username"
      },
      removeMembership: {
        method: "DELETE",
        params: {
          org: {
            required: !0,
            type: "string"
          },
          username: {
            required: !0,
            type: "string"
          }
        },
        url: "/orgs/:org/memberships/:username"
      },
      removeOutsideCollaborator: {
        method: "DELETE",
        params: {
          org: {
            required: !0,
            type: "string"
          },
          username: {
            required: !0,
            type: "string"
          }
        },
        url: "/orgs/:org/outside_collaborators/:username"
      },
      unblockUser: {
        method: "DELETE",
        params: {
          org: {
            required: !0,
            type: "string"
          },
          username: {
            required: !0,
            type: "string"
          }
        },
        url: "/orgs/:org/blocks/:username"
      },
      update: {
        method: "PATCH",
        params: {
          billing_email: {
            type: "string"
          },
          company: {
            type: "string"
          },
          default_repository_permission: {
            enum: ["read", "write", "admin", "none"],
            type: "string"
          },
          description: {
            type: "string"
          },
          email: {
            type: "string"
          },
          has_organization_projects: {
            type: "boolean"
          },
          has_repository_projects: {
            type: "boolean"
          },
          location: {
            type: "string"
          },
          members_allowed_repository_creation_type: {
            enum: ["all", "private", "none"],
            type: "string"
          },
          members_can_create_repositories: {
            type: "boolean"
          },
          name: {
            type: "string"
          },
          org: {
            required: !0,
            type: "string"
          }
        },
        url: "/orgs/:org"
      },
      updateHook: {
        method: "PATCH",
        params: {
          active: {
            type: "boolean"
          },
          config: {
            type: "object"
          },
          "config.content_type": {
            type: "string"
          },
          "config.insecure_ssl": {
            type: "string"
          },
          "config.secret": {
            type: "string"
          },
          "config.url": {
            required: !0,
            type: "string"
          },
          events: {
            type: "string[]"
          },
          hook_id: {
            required: !0,
            type: "integer"
          },
          org: {
            required: !0,
            type: "string"
          }
        },
        url: "/orgs/:org/hooks/:hook_id"
      },
      updateMembership: {
        method: "PATCH",
        params: {
          org: {
            required: !0,
            type: "string"
          },
          state: {
            enum: ["active"],
            required: !0,
            type: "string"
          }
        },
        url: "/user/memberships/orgs/:org"
      }
    },
    projects: {
      addCollaborator: {
        headers: {
          accept: "application/vnd.github.inertia-preview+json"
        },
        method: "PUT",
        params: {
          permission: {
            enum: ["read", "write", "admin"],
            type: "string"
          },
          project_id: {
            required: !0,
            type: "integer"
          },
          username: {
            required: !0,
            type: "string"
          }
        },
        url: "/projects/:project_id/collaborators/:username"
      },
      createCard: {
        headers: {
          accept: "application/vnd.github.inertia-preview+json"
        },
        method: "POST",
        params: {
          column_id: {
            required: !0,
            type: "integer"
          },
          content_id: {
            type: "integer"
          },
          content_type: {
            type: "string"
          },
          note: {
            type: "string"
          }
        },
        url: "/projects/columns/:column_id/cards"
      },
      createColumn: {
        headers: {
          accept: "application/vnd.github.inertia-preview+json"
        },
        method: "POST",
        params: {
          name: {
            required: !0,
            type: "string"
          },
          project_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/projects/:project_id/columns"
      },
      createForAuthenticatedUser: {
        headers: {
          accept: "application/vnd.github.inertia-preview+json"
        },
        method: "POST",
        params: {
          body: {
            type: "string"
          },
          name: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          }
        },
        url: "/user/projects"
      },
      createForOrg: {
        headers: {
          accept: "application/vnd.github.inertia-preview+json"
        },
        method: "POST",
        params: {
          body: {
            type: "string"
          },
          name: {
            required: !0,
            type: "string"
          },
          org: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          }
        },
        url: "/orgs/:org/projects"
      },
      createForRepo: {
        headers: {
          accept: "application/vnd.github.inertia-preview+json"
        },
        method: "POST",
        params: {
          body: {
            type: "string"
          },
          name: {
            required: !0,
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/projects"
      },
      delete: {
        headers: {
          accept: "application/vnd.github.inertia-preview+json"
        },
        method: "DELETE",
        params: {
          project_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/projects/:project_id"
      },
      deleteCard: {
        headers: {
          accept: "application/vnd.github.inertia-preview+json"
        },
        method: "DELETE",
        params: {
          card_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/projects/columns/cards/:card_id"
      },
      deleteColumn: {
        headers: {
          accept: "application/vnd.github.inertia-preview+json"
        },
        method: "DELETE",
        params: {
          column_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/projects/columns/:column_id"
      },
      get: {
        headers: {
          accept: "application/vnd.github.inertia-preview+json"
        },
        method: "GET",
        params: {
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          project_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/projects/:project_id"
      },
      getCard: {
        headers: {
          accept: "application/vnd.github.inertia-preview+json"
        },
        method: "GET",
        params: {
          card_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/projects/columns/cards/:card_id"
      },
      getColumn: {
        headers: {
          accept: "application/vnd.github.inertia-preview+json"
        },
        method: "GET",
        params: {
          column_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/projects/columns/:column_id"
      },
      listCards: {
        headers: {
          accept: "application/vnd.github.inertia-preview+json"
        },
        method: "GET",
        params: {
          archived_state: {
            enum: ["all", "archived", "not_archived"],
            type: "string"
          },
          column_id: {
            required: !0,
            type: "integer"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          }
        },
        url: "/projects/columns/:column_id/cards"
      },
      listCollaborators: {
        headers: {
          accept: "application/vnd.github.inertia-preview+json"
        },
        method: "GET",
        params: {
          affiliation: {
            enum: ["outside", "direct", "all"],
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          project_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/projects/:project_id/collaborators"
      },
      listColumns: {
        headers: {
          accept: "application/vnd.github.inertia-preview+json"
        },
        method: "GET",
        params: {
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          project_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/projects/:project_id/columns"
      },
      listForOrg: {
        headers: {
          accept: "application/vnd.github.inertia-preview+json"
        },
        method: "GET",
        params: {
          org: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          state: {
            enum: ["open", "closed", "all"],
            type: "string"
          }
        },
        url: "/orgs/:org/projects"
      },
      listForRepo: {
        headers: {
          accept: "application/vnd.github.inertia-preview+json"
        },
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          repo: {
            required: !0,
            type: "string"
          },
          state: {
            enum: ["open", "closed", "all"],
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/projects"
      },
      listForUser: {
        headers: {
          accept: "application/vnd.github.inertia-preview+json"
        },
        method: "GET",
        params: {
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          state: {
            enum: ["open", "closed", "all"],
            type: "string"
          },
          username: {
            required: !0,
            type: "string"
          }
        },
        url: "/users/:username/projects"
      },
      moveCard: {
        headers: {
          accept: "application/vnd.github.inertia-preview+json"
        },
        method: "POST",
        params: {
          card_id: {
            required: !0,
            type: "integer"
          },
          column_id: {
            type: "integer"
          },
          position: {
            required: !0,
            type: "string",
            validation: "^(top|bottom|after:\\d+)$"
          }
        },
        url: "/projects/columns/cards/:card_id/moves"
      },
      moveColumn: {
        headers: {
          accept: "application/vnd.github.inertia-preview+json"
        },
        method: "POST",
        params: {
          column_id: {
            required: !0,
            type: "integer"
          },
          position: {
            required: !0,
            type: "string",
            validation: "^(first|last|after:\\d+)$"
          }
        },
        url: "/projects/columns/:column_id/moves"
      },
      removeCollaborator: {
        headers: {
          accept: "application/vnd.github.inertia-preview+json"
        },
        method: "DELETE",
        params: {
          project_id: {
            required: !0,
            type: "integer"
          },
          username: {
            required: !0,
            type: "string"
          }
        },
        url: "/projects/:project_id/collaborators/:username"
      },
      reviewUserPermissionLevel: {
        headers: {
          accept: "application/vnd.github.inertia-preview+json"
        },
        method: "GET",
        params: {
          project_id: {
            required: !0,
            type: "integer"
          },
          username: {
            required: !0,
            type: "string"
          }
        },
        url: "/projects/:project_id/collaborators/:username/permission"
      },
      update: {
        headers: {
          accept: "application/vnd.github.inertia-preview+json"
        },
        method: "PATCH",
        params: {
          body: {
            type: "string"
          },
          name: {
            type: "string"
          },
          organization_permission: {
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          private: {
            type: "boolean"
          },
          project_id: {
            required: !0,
            type: "integer"
          },
          state: {
            enum: ["open", "closed"],
            type: "string"
          }
        },
        url: "/projects/:project_id"
      },
      updateCard: {
        headers: {
          accept: "application/vnd.github.inertia-preview+json"
        },
        method: "PATCH",
        params: {
          archived: {
            type: "boolean"
          },
          card_id: {
            required: !0,
            type: "integer"
          },
          note: {
            type: "string"
          }
        },
        url: "/projects/columns/cards/:card_id"
      },
      updateColumn: {
        headers: {
          accept: "application/vnd.github.inertia-preview+json"
        },
        method: "PATCH",
        params: {
          column_id: {
            required: !0,
            type: "integer"
          },
          name: {
            required: !0,
            type: "string"
          }
        },
        url: "/projects/columns/:column_id"
      }
    },
    pulls: {
      checkIfMerged: {
        method: "GET",
        params: {
          number: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/pulls/:number/merge"
      },
      create: {
        method: "POST",
        params: {
          base: {
            required: !0,
            type: "string"
          },
          body: {
            type: "string"
          },
          draft: {
            type: "boolean"
          },
          head: {
            required: !0,
            type: "string"
          },
          maintainer_can_modify: {
            type: "boolean"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          title: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/pulls"
      },
      createComment: {
        method: "POST",
        params: {
          body: {
            required: !0,
            type: "string"
          },
          commit_id: {
            required: !0,
            type: "string"
          },
          number: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          path: {
            required: !0,
            type: "string"
          },
          position: {
            required: !0,
            type: "integer"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/pulls/:number/comments"
      },
      createCommentReply: {
        method: "POST",
        params: {
          body: {
            required: !0,
            type: "string"
          },
          in_reply_to: {
            required: !0,
            type: "integer"
          },
          number: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/pulls/:number/comments"
      },
      createFromIssue: {
        method: "POST",
        params: {
          base: {
            required: !0,
            type: "string"
          },
          draft: {
            type: "boolean"
          },
          head: {
            required: !0,
            type: "string"
          },
          issue: {
            required: !0,
            type: "integer"
          },
          maintainer_can_modify: {
            type: "boolean"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/pulls"
      },
      createReview: {
        method: "POST",
        params: {
          body: {
            type: "string"
          },
          comments: {
            type: "object[]"
          },
          "comments[].body": {
            required: !0,
            type: "string"
          },
          "comments[].path": {
            required: !0,
            type: "string"
          },
          "comments[].position": {
            required: !0,
            type: "integer"
          },
          commit_id: {
            type: "string"
          },
          event: {
            enum: ["APPROVE", "REQUEST_CHANGES", "COMMENT"],
            type: "string"
          },
          number: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/pulls/:number/reviews"
      },
      createReviewRequest: {
        method: "POST",
        params: {
          number: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          reviewers: {
            type: "string[]"
          },
          team_reviewers: {
            type: "string[]"
          }
        },
        url: "/repos/:owner/:repo/pulls/:number/requested_reviewers"
      },
      deleteComment: {
        method: "DELETE",
        params: {
          comment_id: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/pulls/comments/:comment_id"
      },
      deletePendingReview: {
        method: "DELETE",
        params: {
          number: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          review_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/repos/:owner/:repo/pulls/:number/reviews/:review_id"
      },
      deleteReviewRequest: {
        method: "DELETE",
        params: {
          number: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          reviewers: {
            type: "string[]"
          },
          team_reviewers: {
            type: "string[]"
          }
        },
        url: "/repos/:owner/:repo/pulls/:number/requested_reviewers"
      },
      dismissReview: {
        method: "PUT",
        params: {
          message: {
            required: !0,
            type: "string"
          },
          number: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          review_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/repos/:owner/:repo/pulls/:number/reviews/:review_id/dismissals"
      },
      get: {
        method: "GET",
        params: {
          number: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/pulls/:number"
      },
      getComment: {
        method: "GET",
        params: {
          comment_id: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/pulls/comments/:comment_id"
      },
      getCommentsForReview: {
        method: "GET",
        params: {
          number: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          repo: {
            required: !0,
            type: "string"
          },
          review_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/repos/:owner/:repo/pulls/:number/reviews/:review_id/comments"
      },
      getReview: {
        method: "GET",
        params: {
          number: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          review_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/repos/:owner/:repo/pulls/:number/reviews/:review_id"
      },
      list: {
        method: "GET",
        params: {
          base: {
            type: "string"
          },
          direction: {
            enum: ["asc", "desc"],
            type: "string"
          },
          head: {
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          repo: {
            required: !0,
            type: "string"
          },
          sort: {
            enum: ["created", "updated", "popularity", "long-running"],
            type: "string"
          },
          state: {
            enum: ["open", "closed", "all"],
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/pulls"
      },
      listComments: {
        method: "GET",
        params: {
          direction: {
            enum: ["asc", "desc"],
            type: "string"
          },
          number: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          repo: {
            required: !0,
            type: "string"
          },
          since: {
            type: "string"
          },
          sort: {
            enum: ["created", "updated"],
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/pulls/:number/comments"
      },
      listCommentsForRepo: {
        method: "GET",
        params: {
          direction: {
            enum: ["asc", "desc"],
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          repo: {
            required: !0,
            type: "string"
          },
          since: {
            type: "string"
          },
          sort: {
            enum: ["created", "updated"],
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/pulls/comments"
      },
      listCommits: {
        method: "GET",
        params: {
          number: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/pulls/:number/commits"
      },
      listFiles: {
        method: "GET",
        params: {
          number: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/pulls/:number/files"
      },
      listReviewRequests: {
        method: "GET",
        params: {
          number: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/pulls/:number/requested_reviewers"
      },
      listReviews: {
        method: "GET",
        params: {
          number: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/pulls/:number/reviews"
      },
      merge: {
        method: "PUT",
        params: {
          commit_message: {
            type: "string"
          },
          commit_title: {
            type: "string"
          },
          merge_method: {
            enum: ["merge", "squash", "rebase"],
            type: "string"
          },
          number: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          sha: {
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/pulls/:number/merge"
      },
      submitReview: {
        method: "POST",
        params: {
          body: {
            type: "string"
          },
          event: {
            enum: ["APPROVE", "REQUEST_CHANGES", "COMMENT"],
            required: !0,
            type: "string"
          },
          number: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          review_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/repos/:owner/:repo/pulls/:number/reviews/:review_id/events"
      },
      update: {
        method: "PATCH",
        params: {
          base: {
            type: "string"
          },
          body: {
            type: "string"
          },
          maintainer_can_modify: {
            type: "boolean"
          },
          number: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          state: {
            enum: ["open", "closed"],
            type: "string"
          },
          title: {
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/pulls/:number"
      },
      updateComment: {
        method: "PATCH",
        params: {
          body: {
            required: !0,
            type: "string"
          },
          comment_id: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/pulls/comments/:comment_id"
      },
      updateReview: {
        method: "PUT",
        params: {
          body: {
            required: !0,
            type: "string"
          },
          number: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          review_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/repos/:owner/:repo/pulls/:number/reviews/:review_id"
      }
    },
    rateLimit: {
      get: {
        method: "GET",
        params: {},
        url: "/rate_limit"
      }
    },
    reactions: {
      createForCommitComment: {
        headers: {
          accept: "application/vnd.github.squirrel-girl-preview+json"
        },
        method: "POST",
        params: {
          comment_id: {
            required: !0,
            type: "integer"
          },
          content: {
            enum: ["+1", "-1", "laugh", "confused", "heart", "hooray"],
            required: !0,
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/comments/:comment_id/reactions"
      },
      createForIssue: {
        headers: {
          accept: "application/vnd.github.squirrel-girl-preview+json"
        },
        method: "POST",
        params: {
          content: {
            enum: ["+1", "-1", "laugh", "confused", "heart", "hooray"],
            required: !0,
            type: "string"
          },
          number: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/issues/:number/reactions"
      },
      createForIssueComment: {
        headers: {
          accept: "application/vnd.github.squirrel-girl-preview+json"
        },
        method: "POST",
        params: {
          comment_id: {
            required: !0,
            type: "integer"
          },
          content: {
            enum: ["+1", "-1", "laugh", "confused", "heart", "hooray"],
            required: !0,
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/issues/comments/:comment_id/reactions"
      },
      createForPullRequestReviewComment: {
        headers: {
          accept: "application/vnd.github.squirrel-girl-preview+json"
        },
        method: "POST",
        params: {
          comment_id: {
            required: !0,
            type: "integer"
          },
          content: {
            enum: ["+1", "-1", "laugh", "confused", "heart", "hooray"],
            required: !0,
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/pulls/comments/:comment_id/reactions"
      },
      createForTeamDiscussion: {
        headers: {
          accept: "application/vnd.github.echo-preview+json,application/vnd.github.squirrel-girl-preview+json"
        },
        method: "POST",
        params: {
          content: {
            enum: ["+1", "-1", "laugh", "confused", "heart", "hooray"],
            required: !0,
            type: "string"
          },
          discussion_number: {
            required: !0,
            type: "integer"
          },
          team_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/teams/:team_id/discussions/:discussion_number/reactions"
      },
      createForTeamDiscussionComment: {
        headers: {
          accept: "application/vnd.github.echo-preview+json,application/vnd.github.squirrel-girl-preview+json"
        },
        method: "POST",
        params: {
          comment_number: {
            required: !0,
            type: "integer"
          },
          content: {
            enum: ["+1", "-1", "laugh", "confused", "heart", "hooray"],
            required: !0,
            type: "string"
          },
          discussion_number: {
            required: !0,
            type: "integer"
          },
          team_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/teams/:team_id/discussions/:discussion_number/comments/:comment_number/reactions"
      },
      delete: {
        headers: {
          accept: "application/vnd.github.echo-preview+json,application/vnd.github.squirrel-girl-preview+json"
        },
        method: "DELETE",
        params: {
          reaction_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/reactions/:reaction_id"
      },
      listForCommitComment: {
        headers: {
          accept: "application/vnd.github.squirrel-girl-preview+json"
        },
        method: "GET",
        params: {
          comment_id: {
            required: !0,
            type: "integer"
          },
          content: {
            enum: ["+1", "-1", "laugh", "confused", "heart", "hooray"],
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/comments/:comment_id/reactions"
      },
      listForIssue: {
        headers: {
          accept: "application/vnd.github.squirrel-girl-preview+json"
        },
        method: "GET",
        params: {
          content: {
            enum: ["+1", "-1", "laugh", "confused", "heart", "hooray"],
            type: "string"
          },
          number: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/issues/:number/reactions"
      },
      listForIssueComment: {
        headers: {
          accept: "application/vnd.github.squirrel-girl-preview+json"
        },
        method: "GET",
        params: {
          comment_id: {
            required: !0,
            type: "integer"
          },
          content: {
            enum: ["+1", "-1", "laugh", "confused", "heart", "hooray"],
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/issues/comments/:comment_id/reactions"
      },
      listForPullRequestReviewComment: {
        headers: {
          accept: "application/vnd.github.squirrel-girl-preview+json"
        },
        method: "GET",
        params: {
          comment_id: {
            required: !0,
            type: "integer"
          },
          content: {
            enum: ["+1", "-1", "laugh", "confused", "heart", "hooray"],
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/pulls/comments/:comment_id/reactions"
      },
      listForTeamDiscussion: {
        headers: {
          accept: "application/vnd.github.echo-preview+json,application/vnd.github.squirrel-girl-preview+json"
        },
        method: "GET",
        params: {
          content: {
            enum: ["+1", "-1", "laugh", "confused", "heart", "hooray"],
            type: "string"
          },
          discussion_number: {
            required: !0,
            type: "integer"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          team_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/teams/:team_id/discussions/:discussion_number/reactions"
      },
      listForTeamDiscussionComment: {
        headers: {
          accept: "application/vnd.github.echo-preview+json,application/vnd.github.squirrel-girl-preview+json"
        },
        method: "GET",
        params: {
          comment_number: {
            required: !0,
            type: "integer"
          },
          content: {
            enum: ["+1", "-1", "laugh", "confused", "heart", "hooray"],
            type: "string"
          },
          discussion_number: {
            required: !0,
            type: "integer"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          team_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/teams/:team_id/discussions/:discussion_number/comments/:comment_number/reactions"
      }
    },
    repos: {
      acceptInvitation: {
        method: "PATCH",
        params: {
          invitation_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/user/repository_invitations/:invitation_id"
      },
      addCollaborator: {
        method: "PUT",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          permission: {
            enum: ["pull", "push", "admin"],
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          username: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/collaborators/:username"
      },
      addDeployKey: {
        method: "POST",
        params: {
          key: {
            required: !0,
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          read_only: {
            type: "boolean"
          },
          repo: {
            required: !0,
            type: "string"
          },
          title: {
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/keys"
      },
      addProtectedBranchAdminEnforcement: {
        method: "POST",
        params: {
          branch: {
            required: !0,
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/branches/:branch/protection/enforce_admins"
      },
      addProtectedBranchRequiredSignatures: {
        headers: {
          accept: "application/vnd.github.zzzax-preview+json"
        },
        method: "POST",
        params: {
          branch: {
            required: !0,
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/branches/:branch/protection/required_signatures"
      },
      addProtectedBranchRequiredStatusChecksContexts: {
        method: "POST",
        params: {
          branch: {
            required: !0,
            type: "string"
          },
          contexts: {
            mapTo: "data",
            required: !0,
            type: "string[]"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts"
      },
      addProtectedBranchTeamRestrictions: {
        method: "POST",
        params: {
          branch: {
            required: !0,
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          teams: {
            mapTo: "data",
            required: !0,
            type: "string[]"
          }
        },
        url: "/repos/:owner/:repo/branches/:branch/protection/restrictions/teams"
      },
      addProtectedBranchUserRestrictions: {
        method: "POST",
        params: {
          branch: {
            required: !0,
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          users: {
            mapTo: "data",
            required: !0,
            type: "string[]"
          }
        },
        url: "/repos/:owner/:repo/branches/:branch/protection/restrictions/users"
      },
      checkCollaborator: {
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          username: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/collaborators/:username"
      },
      compareCommits: {
        method: "GET",
        params: {
          base: {
            required: !0,
            type: "string"
          },
          head: {
            required: !0,
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/compare/:base...:head"
      },
      createCommitComment: {
        method: "POST",
        params: {
          body: {
            required: !0,
            type: "string"
          },
          line: {
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          path: {
            type: "string"
          },
          position: {
            type: "integer"
          },
          repo: {
            required: !0,
            type: "string"
          },
          sha: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/commits/:sha/comments"
      },
      createDeployment: {
        method: "POST",
        params: {
          auto_merge: {
            type: "boolean"
          },
          description: {
            type: "string"
          },
          environment: {
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          payload: {
            type: "string"
          },
          production_environment: {
            type: "boolean"
          },
          ref: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          required_contexts: {
            type: "string[]"
          },
          task: {
            type: "string"
          },
          transient_environment: {
            type: "boolean"
          }
        },
        url: "/repos/:owner/:repo/deployments"
      },
      createDeploymentStatus: {
        method: "POST",
        params: {
          auto_inactive: {
            type: "boolean"
          },
          deployment_id: {
            required: !0,
            type: "integer"
          },
          description: {
            type: "string"
          },
          environment: {
            enum: ["production", "staging", "qa"],
            type: "string"
          },
          environment_url: {
            type: "string"
          },
          log_url: {
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          state: {
            enum: ["error", "failure", "inactive", "in_progress", "queued", "pending", "success"],
            required: !0,
            type: "string"
          },
          target_url: {
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/deployments/:deployment_id/statuses"
      },
      createFile: {
        method: "PUT",
        params: {
          author: {
            type: "object"
          },
          "author.email": {
            required: !0,
            type: "string"
          },
          "author.name": {
            required: !0,
            type: "string"
          },
          branch: {
            type: "string"
          },
          committer: {
            type: "object"
          },
          "committer.email": {
            required: !0,
            type: "string"
          },
          "committer.name": {
            required: !0,
            type: "string"
          },
          content: {
            required: !0,
            type: "string"
          },
          message: {
            required: !0,
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          path: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/contents/:path"
      },
      createForAuthenticatedUser: {
        method: "POST",
        params: {
          allow_merge_commit: {
            type: "boolean"
          },
          allow_rebase_merge: {
            type: "boolean"
          },
          allow_squash_merge: {
            type: "boolean"
          },
          auto_init: {
            type: "boolean"
          },
          description: {
            type: "string"
          },
          gitignore_template: {
            type: "string"
          },
          has_issues: {
            type: "boolean"
          },
          has_projects: {
            type: "boolean"
          },
          has_wiki: {
            type: "boolean"
          },
          homepage: {
            type: "string"
          },
          license_template: {
            type: "string"
          },
          name: {
            required: !0,
            type: "string"
          },
          private: {
            type: "boolean"
          },
          team_id: {
            type: "integer"
          }
        },
        url: "/user/repos"
      },
      createFork: {
        method: "POST",
        params: {
          organization: {
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/forks"
      },
      createHook: {
        method: "POST",
        params: {
          active: {
            type: "boolean"
          },
          config: {
            required: !0,
            type: "object"
          },
          "config.content_type": {
            type: "string"
          },
          "config.insecure_ssl": {
            type: "string"
          },
          "config.secret": {
            type: "string"
          },
          "config.url": {
            required: !0,
            type: "string"
          },
          events: {
            type: "string[]"
          },
          name: {
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/hooks"
      },
      createInOrg: {
        method: "POST",
        params: {
          allow_merge_commit: {
            type: "boolean"
          },
          allow_rebase_merge: {
            type: "boolean"
          },
          allow_squash_merge: {
            type: "boolean"
          },
          auto_init: {
            type: "boolean"
          },
          description: {
            type: "string"
          },
          gitignore_template: {
            type: "string"
          },
          has_issues: {
            type: "boolean"
          },
          has_projects: {
            type: "boolean"
          },
          has_wiki: {
            type: "boolean"
          },
          homepage: {
            type: "string"
          },
          license_template: {
            type: "string"
          },
          name: {
            required: !0,
            type: "string"
          },
          org: {
            required: !0,
            type: "string"
          },
          private: {
            type: "boolean"
          },
          team_id: {
            type: "integer"
          }
        },
        url: "/orgs/:org/repos"
      },
      createRelease: {
        method: "POST",
        params: {
          body: {
            type: "string"
          },
          draft: {
            type: "boolean"
          },
          name: {
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          prerelease: {
            type: "boolean"
          },
          repo: {
            required: !0,
            type: "string"
          },
          tag_name: {
            required: !0,
            type: "string"
          },
          target_commitish: {
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/releases"
      },
      createStatus: {
        method: "POST",
        params: {
          context: {
            type: "string"
          },
          description: {
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          sha: {
            required: !0,
            type: "string"
          },
          state: {
            enum: ["error", "failure", "pending", "success"],
            required: !0,
            type: "string"
          },
          target_url: {
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/statuses/:sha"
      },
      declineInvitation: {
        method: "DELETE",
        params: {
          invitation_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/user/repository_invitations/:invitation_id"
      },
      delete: {
        method: "DELETE",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo"
      },
      deleteCommitComment: {
        method: "DELETE",
        params: {
          comment_id: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/comments/:comment_id"
      },
      deleteDownload: {
        method: "DELETE",
        params: {
          download_id: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/downloads/:download_id"
      },
      deleteFile: {
        method: "DELETE",
        params: {
          author: {
            type: "object"
          },
          branch: {
            type: "string"
          },
          committer: {
            type: "object"
          },
          message: {
            required: !0,
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          path: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          sha: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/contents/:path"
      },
      deleteHook: {
        method: "DELETE",
        params: {
          hook_id: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/hooks/:hook_id"
      },
      deleteInvitation: {
        method: "DELETE",
        params: {
          invitation_id: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/invitations/:invitation_id"
      },
      deleteRelease: {
        method: "DELETE",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          release_id: {
            required: !0,
            type: "integer"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/releases/:release_id"
      },
      deleteReleaseAsset: {
        method: "DELETE",
        params: {
          asset_id: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/releases/assets/:asset_id"
      },
      disablePagesSite: {
        headers: {
          accept: "application/vnd.github.switcheroo-preview+json"
        },
        method: "DELETE",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/pages"
      },
      enablePagesSite: {
        headers: {
          accept: "application/vnd.github.switcheroo-preview+json"
        },
        method: "POST",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          "source[branch]": {
            enum: ["master", "gh-pages"],
            type: "string"
          },
          "source[path]": {
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/pages"
      },
      get: {
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo"
      },
      getArchiveLink: {
        method: "GET",
        params: {
          archive_format: {
            required: !0,
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          ref: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/:archive_format/:ref"
      },
      getBranch: {
        method: "GET",
        params: {
          branch: {
            required: !0,
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/branches/:branch"
      },
      getBranchProtection: {
        method: "GET",
        params: {
          branch: {
            required: !0,
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/branches/:branch/protection"
      },
      getClones: {
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          per: {
            enum: ["day", "week"],
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/traffic/clones"
      },
      getCodeFrequencyStats: {
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/stats/code_frequency"
      },
      getCollaboratorPermissionLevel: {
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          username: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/collaborators/:username/permission"
      },
      getCombinedStatusForRef: {
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          ref: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/commits/:ref/status"
      },
      getCommit: {
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          sha: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/commits/:sha"
      },
      getCommitActivityStats: {
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/stats/commit_activity"
      },
      getCommitComment: {
        method: "GET",
        params: {
          comment_id: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/comments/:comment_id"
      },
      getCommitRefSha: {
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          ref: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/commits/:ref"
      },
      getContents: {
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          path: {
            required: !0,
            type: "string"
          },
          ref: {
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/contents/:path"
      },
      getContributorsStats: {
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/stats/contributors"
      },
      getDeployKey: {
        method: "GET",
        params: {
          key_id: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/keys/:key_id"
      },
      getDeployment: {
        method: "GET",
        params: {
          deployment_id: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/deployments/:deployment_id"
      },
      getDeploymentStatus: {
        method: "GET",
        params: {
          deployment_id: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          status_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/repos/:owner/:repo/deployments/:deployment_id/statuses/:status_id"
      },
      getDownload: {
        method: "GET",
        params: {
          download_id: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/downloads/:download_id"
      },
      getHook: {
        method: "GET",
        params: {
          hook_id: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/hooks/:hook_id"
      },
      getLatestPagesBuild: {
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/pages/builds/latest"
      },
      getLatestRelease: {
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/releases/latest"
      },
      getPages: {
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/pages"
      },
      getPagesBuild: {
        method: "GET",
        params: {
          build_id: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/pages/builds/:build_id"
      },
      getParticipationStats: {
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/stats/participation"
      },
      getProtectedBranchAdminEnforcement: {
        method: "GET",
        params: {
          branch: {
            required: !0,
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/branches/:branch/protection/enforce_admins"
      },
      getProtectedBranchPullRequestReviewEnforcement: {
        method: "GET",
        params: {
          branch: {
            required: !0,
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews"
      },
      getProtectedBranchRequiredSignatures: {
        headers: {
          accept: "application/vnd.github.zzzax-preview+json"
        },
        method: "GET",
        params: {
          branch: {
            required: !0,
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/branches/:branch/protection/required_signatures"
      },
      getProtectedBranchRequiredStatusChecks: {
        method: "GET",
        params: {
          branch: {
            required: !0,
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/branches/:branch/protection/required_status_checks"
      },
      getProtectedBranchRestrictions: {
        method: "GET",
        params: {
          branch: {
            required: !0,
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/branches/:branch/protection/restrictions"
      },
      getPunchCardStats: {
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/stats/punch_card"
      },
      getReadme: {
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          ref: {
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/readme"
      },
      getRelease: {
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          release_id: {
            required: !0,
            type: "integer"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/releases/:release_id"
      },
      getReleaseAsset: {
        method: "GET",
        params: {
          asset_id: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/releases/assets/:asset_id"
      },
      getReleaseByTag: {
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          tag: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/releases/tags/:tag"
      },
      getTopPaths: {
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/traffic/popular/paths"
      },
      getTopReferrers: {
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/traffic/popular/referrers"
      },
      getViews: {
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          per: {
            enum: ["day", "week"],
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/traffic/views"
      },
      list: {
        method: "GET",
        params: {
          affiliation: {
            type: "string"
          },
          direction: {
            enum: ["asc", "desc"],
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          sort: {
            enum: ["created", "updated", "pushed", "full_name"],
            type: "string"
          },
          type: {
            enum: ["all", "owner", "public", "private", "member"],
            type: "string"
          },
          visibility: {
            enum: ["all", "public", "private"],
            type: "string"
          }
        },
        url: "/user/repos"
      },
      listAssetsForRelease: {
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          release_id: {
            required: !0,
            type: "integer"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/releases/:release_id/assets"
      },
      listBranches: {
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          protected: {
            type: "boolean"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/branches"
      },
      listCollaborators: {
        method: "GET",
        params: {
          affiliation: {
            enum: ["outside", "direct", "all"],
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/collaborators"
      },
      listCommentsForCommit: {
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          ref: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/commits/:ref/comments"
      },
      listCommitComments: {
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/comments"
      },
      listCommits: {
        method: "GET",
        params: {
          author: {
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          path: {
            type: "string"
          },
          per_page: {
            type: "integer"
          },
          repo: {
            required: !0,
            type: "string"
          },
          sha: {
            type: "string"
          },
          since: {
            type: "string"
          },
          until: {
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/commits"
      },
      listContributors: {
        method: "GET",
        params: {
          anon: {
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/contributors"
      },
      listDeployKeys: {
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/keys"
      },
      listDeploymentStatuses: {
        method: "GET",
        params: {
          deployment_id: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/deployments/:deployment_id/statuses"
      },
      listDeployments: {
        method: "GET",
        params: {
          environment: {
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          ref: {
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          sha: {
            type: "string"
          },
          task: {
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/deployments"
      },
      listDownloads: {
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/downloads"
      },
      listForOrg: {
        method: "GET",
        params: {
          direction: {
            enum: ["asc", "desc"],
            type: "string"
          },
          org: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          sort: {
            enum: ["created", "updated", "pushed", "full_name"],
            type: "string"
          },
          type: {
            enum: ["all", "public", "private", "forks", "sources", "member"],
            type: "string"
          }
        },
        url: "/orgs/:org/repos"
      },
      listForUser: {
        method: "GET",
        params: {
          direction: {
            enum: ["asc", "desc"],
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          sort: {
            enum: ["created", "updated", "pushed", "full_name"],
            type: "string"
          },
          type: {
            enum: ["all", "owner", "member"],
            type: "string"
          },
          username: {
            required: !0,
            type: "string"
          }
        },
        url: "/users/:username/repos"
      },
      listForks: {
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          repo: {
            required: !0,
            type: "string"
          },
          sort: {
            enum: ["newest", "oldest", "stargazers"],
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/forks"
      },
      listHooks: {
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/hooks"
      },
      listInvitations: {
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/invitations"
      },
      listInvitationsForAuthenticatedUser: {
        method: "GET",
        params: {
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          }
        },
        url: "/user/repository_invitations"
      },
      listLanguages: {
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/languages"
      },
      listPagesBuilds: {
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/pages/builds"
      },
      listProtectedBranchRequiredStatusChecksContexts: {
        method: "GET",
        params: {
          branch: {
            required: !0,
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts"
      },
      listProtectedBranchTeamRestrictions: {
        method: "GET",
        params: {
          branch: {
            required: !0,
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/branches/:branch/protection/restrictions/teams"
      },
      listProtectedBranchUserRestrictions: {
        method: "GET",
        params: {
          branch: {
            required: !0,
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/branches/:branch/protection/restrictions/users"
      },
      listPublic: {
        method: "GET",
        params: {
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          since: {
            type: "string"
          }
        },
        url: "/repositories"
      },
      listReleases: {
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/releases"
      },
      listStatusesForRef: {
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          ref: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/commits/:ref/statuses"
      },
      listTags: {
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/tags"
      },
      listTeams: {
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/teams"
      },
      listTopics: {
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/topics"
      },
      merge: {
        method: "POST",
        params: {
          base: {
            required: !0,
            type: "string"
          },
          commit_message: {
            type: "string"
          },
          head: {
            required: !0,
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/merges"
      },
      pingHook: {
        method: "POST",
        params: {
          hook_id: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/hooks/:hook_id/pings"
      },
      removeBranchProtection: {
        method: "DELETE",
        params: {
          branch: {
            required: !0,
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/branches/:branch/protection"
      },
      removeCollaborator: {
        method: "DELETE",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          username: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/collaborators/:username"
      },
      removeDeployKey: {
        method: "DELETE",
        params: {
          key_id: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/keys/:key_id"
      },
      removeProtectedBranchAdminEnforcement: {
        method: "DELETE",
        params: {
          branch: {
            required: !0,
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/branches/:branch/protection/enforce_admins"
      },
      removeProtectedBranchPullRequestReviewEnforcement: {
        method: "DELETE",
        params: {
          branch: {
            required: !0,
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews"
      },
      removeProtectedBranchRequiredSignatures: {
        headers: {
          accept: "application/vnd.github.zzzax-preview+json"
        },
        method: "DELETE",
        params: {
          branch: {
            required: !0,
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/branches/:branch/protection/required_signatures"
      },
      removeProtectedBranchRequiredStatusChecks: {
        method: "DELETE",
        params: {
          branch: {
            required: !0,
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/branches/:branch/protection/required_status_checks"
      },
      removeProtectedBranchRequiredStatusChecksContexts: {
        method: "DELETE",
        params: {
          branch: {
            required: !0,
            type: "string"
          },
          contexts: {
            mapTo: "data",
            required: !0,
            type: "string[]"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts"
      },
      removeProtectedBranchRestrictions: {
        method: "DELETE",
        params: {
          branch: {
            required: !0,
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/branches/:branch/protection/restrictions"
      },
      removeProtectedBranchTeamRestrictions: {
        method: "DELETE",
        params: {
          branch: {
            required: !0,
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          teams: {
            mapTo: "data",
            required: !0,
            type: "string[]"
          }
        },
        url: "/repos/:owner/:repo/branches/:branch/protection/restrictions/teams"
      },
      removeProtectedBranchUserRestrictions: {
        method: "DELETE",
        params: {
          branch: {
            required: !0,
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          users: {
            mapTo: "data",
            required: !0,
            type: "string[]"
          }
        },
        url: "/repos/:owner/:repo/branches/:branch/protection/restrictions/users"
      },
      replaceProtectedBranchRequiredStatusChecksContexts: {
        method: "PUT",
        params: {
          branch: {
            required: !0,
            type: "string"
          },
          contexts: {
            mapTo: "data",
            required: !0,
            type: "string[]"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts"
      },
      replaceProtectedBranchTeamRestrictions: {
        method: "PUT",
        params: {
          branch: {
            required: !0,
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          teams: {
            mapTo: "data",
            required: !0,
            type: "string[]"
          }
        },
        url: "/repos/:owner/:repo/branches/:branch/protection/restrictions/teams"
      },
      replaceProtectedBranchUserRestrictions: {
        method: "PUT",
        params: {
          branch: {
            required: !0,
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          users: {
            mapTo: "data",
            required: !0,
            type: "string[]"
          }
        },
        url: "/repos/:owner/:repo/branches/:branch/protection/restrictions/users"
      },
      replaceTopics: {
        method: "PUT",
        params: {
          names: {
            required: !0,
            type: "string[]"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/topics"
      },
      requestPageBuild: {
        headers: {
          accept: "application/vnd.github.mister-fantastic-preview+json"
        },
        method: "POST",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/pages/builds"
      },
      retrieveCommunityProfileMetrics: {
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/community/profile"
      },
      testPushHook: {
        method: "POST",
        params: {
          hook_id: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/hooks/:hook_id/tests"
      },
      transfer: {
        headers: {
          accept: "application/vnd.github.nightshade-preview+json"
        },
        method: "POST",
        params: {
          new_owner: {
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          team_ids: {
            type: "integer[]"
          }
        },
        url: "/repos/:owner/:repo/transfer"
      },
      update: {
        method: "PATCH",
        params: {
          allow_merge_commit: {
            type: "boolean"
          },
          allow_rebase_merge: {
            type: "boolean"
          },
          allow_squash_merge: {
            type: "boolean"
          },
          archived: {
            type: "boolean"
          },
          default_branch: {
            type: "string"
          },
          description: {
            type: "string"
          },
          has_issues: {
            type: "boolean"
          },
          has_projects: {
            type: "boolean"
          },
          has_wiki: {
            type: "boolean"
          },
          homepage: {
            type: "string"
          },
          name: {
            required: !0,
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          private: {
            type: "boolean"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo"
      },
      updateBranchProtection: {
        method: "PUT",
        params: {
          branch: {
            required: !0,
            type: "string"
          },
          enforce_admins: {
            allowNull: !0,
            required: !0,
            type: "boolean"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          required_pull_request_reviews: {
            allowNull: !0,
            required: !0,
            type: "object"
          },
          "required_pull_request_reviews.dismiss_stale_reviews": {
            type: "boolean"
          },
          "required_pull_request_reviews.dismissal_restrictions": {
            type: "object"
          },
          "required_pull_request_reviews.dismissal_restrictions.teams": {
            type: "string[]"
          },
          "required_pull_request_reviews.dismissal_restrictions.users": {
            type: "string[]"
          },
          "required_pull_request_reviews.require_code_owner_reviews": {
            type: "boolean"
          },
          "required_pull_request_reviews.required_approving_review_count": {
            type: "integer"
          },
          required_status_checks: {
            allowNull: !0,
            required: !0,
            type: "object"
          },
          "required_status_checks.contexts": {
            required: !0,
            type: "string[]"
          },
          "required_status_checks.strict": {
            required: !0,
            type: "boolean"
          },
          restrictions: {
            allowNull: !0,
            required: !0,
            type: "object"
          },
          "restrictions.teams": {
            type: "string[]"
          },
          "restrictions.users": {
            type: "string[]"
          }
        },
        url: "/repos/:owner/:repo/branches/:branch/protection"
      },
      updateCommitComment: {
        method: "PATCH",
        params: {
          body: {
            required: !0,
            type: "string"
          },
          comment_id: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/comments/:comment_id"
      },
      updateFile: {
        method: "PUT",
        params: {
          author: {
            type: "object"
          },
          "author.email": {
            required: !0,
            type: "string"
          },
          "author.name": {
            required: !0,
            type: "string"
          },
          branch: {
            type: "string"
          },
          committer: {
            type: "object"
          },
          "committer.email": {
            required: !0,
            type: "string"
          },
          "committer.name": {
            required: !0,
            type: "string"
          },
          content: {
            required: !0,
            type: "string"
          },
          message: {
            required: !0,
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          path: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          sha: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/contents/:path"
      },
      updateHook: {
        method: "PATCH",
        params: {
          active: {
            type: "boolean"
          },
          add_events: {
            type: "string[]"
          },
          config: {
            type: "object"
          },
          "config.content_type": {
            type: "string"
          },
          "config.insecure_ssl": {
            type: "string"
          },
          "config.secret": {
            type: "string"
          },
          "config.url": {
            required: !0,
            type: "string"
          },
          events: {
            type: "string[]"
          },
          hook_id: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          remove_events: {
            type: "string[]"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/hooks/:hook_id"
      },
      updateInformationAboutPagesSite: {
        method: "PUT",
        params: {
          cname: {
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          source: {
            enum: ['"gh-pages"', '"master"', '"master /docs"'],
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/pages"
      },
      updateInvitation: {
        method: "PATCH",
        params: {
          invitation_id: {
            required: !0,
            type: "integer"
          },
          owner: {
            required: !0,
            type: "string"
          },
          permissions: {
            enum: ["read", "write", "admin"],
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/invitations/:invitation_id"
      },
      updateProtectedBranchPullRequestReviewEnforcement: {
        method: "PATCH",
        params: {
          branch: {
            required: !0,
            type: "string"
          },
          dismiss_stale_reviews: {
            type: "boolean"
          },
          dismissal_restrictions: {
            type: "object"
          },
          "dismissal_restrictions.teams": {
            type: "string[]"
          },
          "dismissal_restrictions.users": {
            type: "string[]"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          require_code_owner_reviews: {
            type: "boolean"
          },
          required_approving_review_count: {
            type: "integer"
          }
        },
        url: "/repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews"
      },
      updateProtectedBranchRequiredStatusChecks: {
        method: "PATCH",
        params: {
          branch: {
            required: !0,
            type: "string"
          },
          contexts: {
            type: "string[]"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          strict: {
            type: "boolean"
          }
        },
        url: "/repos/:owner/:repo/branches/:branch/protection/required_status_checks"
      },
      updateRelease: {
        method: "PATCH",
        params: {
          body: {
            type: "string"
          },
          draft: {
            type: "boolean"
          },
          name: {
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          prerelease: {
            type: "boolean"
          },
          release_id: {
            required: !0,
            type: "integer"
          },
          repo: {
            required: !0,
            type: "string"
          },
          tag_name: {
            type: "string"
          },
          target_commitish: {
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/releases/:release_id"
      },
      updateReleaseAsset: {
        method: "PATCH",
        params: {
          asset_id: {
            required: !0,
            type: "integer"
          },
          label: {
            type: "string"
          },
          name: {
            type: "string"
          },
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          }
        },
        url: "/repos/:owner/:repo/releases/assets/:asset_id"
      },
      uploadReleaseAsset: {
        method: "POST",
        params: {
          file: {
            mapTo: "data",
            required: !0,
            type: "string | object"
          },
          headers: {
            required: !0,
            type: "object"
          },
          "headers.content-length": {
            required: !0,
            type: "integer"
          },
          "headers.content-type": {
            required: !0,
            type: "string"
          },
          label: {
            type: "string"
          },
          name: {
            required: !0,
            type: "string"
          },
          url: {
            required: !0,
            type: "string"
          }
        },
        url: ":url"
      }
    },
    search: {
      code: {
        method: "GET",
        params: {
          order: {
            enum: ["desc", "asc"],
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          q: {
            required: !0,
            type: "string"
          },
          sort: {
            enum: ["indexed"],
            type: "string"
          }
        },
        url: "/search/code"
      },
      commits: {
        headers: {
          accept: "application/vnd.github.cloak-preview+json"
        },
        method: "GET",
        params: {
          order: {
            enum: ["desc", "asc"],
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          q: {
            required: !0,
            type: "string"
          },
          sort: {
            enum: ["author-date", "committer-date"],
            type: "string"
          }
        },
        url: "/search/commits"
      },
      issues: {
        deprecated: "octokit.search.issues() has been renamed to octokit.search.issuesAndPullRequests() (2018-12-27)",
        method: "GET",
        params: {
          order: {
            enum: ["desc", "asc"],
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          q: {
            required: !0,
            type: "string"
          },
          sort: {
            enum: ["comments", "reactions", "reactions-+1", "reactions--1", "reactions-smile", "reactions-thinking_face", "reactions-heart", "reactions-tada", "interactions", "created", "updated"],
            type: "string"
          }
        },
        url: "/search/issues"
      },
      issuesAndPullRequests: {
        method: "GET",
        params: {
          order: {
            enum: ["desc", "asc"],
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          q: {
            required: !0,
            type: "string"
          },
          sort: {
            enum: ["comments", "reactions", "reactions-+1", "reactions--1", "reactions-smile", "reactions-thinking_face", "reactions-heart", "reactions-tada", "interactions", "created", "updated"],
            type: "string"
          }
        },
        url: "/search/issues"
      },
      labels: {
        method: "GET",
        params: {
          order: {
            enum: ["desc", "asc"],
            type: "string"
          },
          q: {
            required: !0,
            type: "string"
          },
          repository_id: {
            required: !0,
            type: "integer"
          },
          sort: {
            enum: ["created", "updated"],
            type: "string"
          }
        },
        url: "/search/labels"
      },
      repos: {
        method: "GET",
        params: {
          order: {
            enum: ["desc", "asc"],
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          q: {
            required: !0,
            type: "string"
          },
          sort: {
            enum: ["stars", "forks", "help-wanted-issues", "updated"],
            type: "string"
          }
        },
        url: "/search/repositories"
      },
      topics: {
        method: "GET",
        params: {
          q: {
            required: !0,
            type: "string"
          }
        },
        url: "/search/topics"
      },
      users: {
        method: "GET",
        params: {
          order: {
            enum: ["desc", "asc"],
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          q: {
            required: !0,
            type: "string"
          },
          sort: {
            enum: ["followers", "repositories", "joined"],
            type: "string"
          }
        },
        url: "/search/users"
      }
    },
    teams: {
      addMember: {
        method: "PUT",
        params: {
          team_id: {
            required: !0,
            type: "integer"
          },
          username: {
            required: !0,
            type: "string"
          }
        },
        url: "/teams/:team_id/members/:username"
      },
      addOrUpdateMembership: {
        method: "PUT",
        params: {
          role: {
            enum: ["member", "maintainer"],
            type: "string"
          },
          team_id: {
            required: !0,
            type: "integer"
          },
          username: {
            required: !0,
            type: "string"
          }
        },
        url: "/teams/:team_id/memberships/:username"
      },
      addOrUpdateProject: {
        headers: {
          accept: "application/vnd.github.inertia-preview+json"
        },
        method: "PUT",
        params: {
          permission: {
            enum: ["read", "write", "admin"],
            type: "string"
          },
          project_id: {
            required: !0,
            type: "integer"
          },
          team_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/teams/:team_id/projects/:project_id"
      },
      addOrUpdateRepo: {
        method: "PUT",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          permission: {
            enum: ["pull", "push", "admin"],
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          team_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/teams/:team_id/repos/:owner/:repo"
      },
      checkManagesRepo: {
        method: "GET",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          team_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/teams/:team_id/repos/:owner/:repo"
      },
      create: {
        method: "POST",
        params: {
          description: {
            type: "string"
          },
          maintainers: {
            type: "string[]"
          },
          name: {
            required: !0,
            type: "string"
          },
          org: {
            required: !0,
            type: "string"
          },
          parent_team_id: {
            type: "integer"
          },
          permission: {
            enum: ["pull", "push", "admin"],
            type: "string"
          },
          privacy: {
            enum: ["secret", "closed"],
            type: "string"
          },
          repo_names: {
            type: "string[]"
          }
        },
        url: "/orgs/:org/teams"
      },
      createDiscussion: {
        headers: {
          accept: "application/vnd.github.echo-preview+json"
        },
        method: "POST",
        params: {
          body: {
            required: !0,
            type: "string"
          },
          private: {
            type: "boolean"
          },
          team_id: {
            required: !0,
            type: "integer"
          },
          title: {
            required: !0,
            type: "string"
          }
        },
        url: "/teams/:team_id/discussions"
      },
      createDiscussionComment: {
        headers: {
          accept: "application/vnd.github.echo-preview+json"
        },
        method: "POST",
        params: {
          body: {
            required: !0,
            type: "string"
          },
          discussion_number: {
            required: !0,
            type: "integer"
          },
          team_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/teams/:team_id/discussions/:discussion_number/comments"
      },
      delete: {
        method: "DELETE",
        params: {
          team_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/teams/:team_id"
      },
      deleteDiscussion: {
        headers: {
          accept: "application/vnd.github.echo-preview+json"
        },
        method: "DELETE",
        params: {
          discussion_number: {
            required: !0,
            type: "integer"
          },
          team_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/teams/:team_id/discussions/:discussion_number"
      },
      deleteDiscussionComment: {
        headers: {
          accept: "application/vnd.github.echo-preview+json"
        },
        method: "DELETE",
        params: {
          comment_number: {
            required: !0,
            type: "integer"
          },
          discussion_number: {
            required: !0,
            type: "integer"
          },
          team_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/teams/:team_id/discussions/:discussion_number/comments/:comment_number"
      },
      get: {
        method: "GET",
        params: {
          team_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/teams/:team_id"
      },
      getByName: {
        method: "GET",
        params: {
          org: {
            required: !0,
            type: "string"
          },
          team_slug: {
            required: !0,
            type: "string"
          }
        },
        url: "/orgs/:org/teams/:team_slug"
      },
      getDiscussion: {
        headers: {
          accept: "application/vnd.github.echo-preview+json"
        },
        method: "GET",
        params: {
          discussion_number: {
            required: !0,
            type: "integer"
          },
          team_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/teams/:team_id/discussions/:discussion_number"
      },
      getDiscussionComment: {
        headers: {
          accept: "application/vnd.github.echo-preview+json"
        },
        method: "GET",
        params: {
          comment_number: {
            required: !0,
            type: "integer"
          },
          discussion_number: {
            required: !0,
            type: "integer"
          },
          team_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/teams/:team_id/discussions/:discussion_number/comments/:comment_number"
      },
      getMember: {
        method: "GET",
        params: {
          team_id: {
            required: !0,
            type: "integer"
          },
          username: {
            required: !0,
            type: "string"
          }
        },
        url: "/teams/:team_id/members/:username"
      },
      getMembership: {
        method: "GET",
        params: {
          team_id: {
            required: !0,
            type: "integer"
          },
          username: {
            required: !0,
            type: "string"
          }
        },
        url: "/teams/:team_id/memberships/:username"
      },
      list: {
        method: "GET",
        params: {
          org: {
            required: !0,
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          }
        },
        url: "/orgs/:org/teams"
      },
      listChild: {
        headers: {
          accept: "application/vnd.github.hellcat-preview+json"
        },
        method: "GET",
        params: {
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          team_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/teams/:team_id/teams"
      },
      listDiscussionComments: {
        headers: {
          accept: "application/vnd.github.echo-preview+json"
        },
        method: "GET",
        params: {
          direction: {
            enum: ["asc", "desc"],
            type: "string"
          },
          discussion_number: {
            required: !0,
            type: "integer"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          team_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/teams/:team_id/discussions/:discussion_number/comments"
      },
      listDiscussions: {
        headers: {
          accept: "application/vnd.github.echo-preview+json"
        },
        method: "GET",
        params: {
          direction: {
            enum: ["asc", "desc"],
            type: "string"
          },
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          team_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/teams/:team_id/discussions"
      },
      listForAuthenticatedUser: {
        method: "GET",
        params: {
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          }
        },
        url: "/user/teams"
      },
      listMembers: {
        method: "GET",
        params: {
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          role: {
            enum: ["member", "maintainer", "all"],
            type: "string"
          },
          team_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/teams/:team_id/members"
      },
      listPendingInvitations: {
        method: "GET",
        params: {
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          team_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/teams/:team_id/invitations"
      },
      listProjects: {
        headers: {
          accept: "application/vnd.github.inertia-preview+json"
        },
        method: "GET",
        params: {
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          team_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/teams/:team_id/projects"
      },
      listRepos: {
        method: "GET",
        params: {
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          team_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/teams/:team_id/repos"
      },
      removeMember: {
        method: "DELETE",
        params: {
          team_id: {
            required: !0,
            type: "integer"
          },
          username: {
            required: !0,
            type: "string"
          }
        },
        url: "/teams/:team_id/members/:username"
      },
      removeMembership: {
        method: "DELETE",
        params: {
          team_id: {
            required: !0,
            type: "integer"
          },
          username: {
            required: !0,
            type: "string"
          }
        },
        url: "/teams/:team_id/memberships/:username"
      },
      removeProject: {
        method: "DELETE",
        params: {
          project_id: {
            required: !0,
            type: "integer"
          },
          team_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/teams/:team_id/projects/:project_id"
      },
      removeRepo: {
        method: "DELETE",
        params: {
          owner: {
            required: !0,
            type: "string"
          },
          repo: {
            required: !0,
            type: "string"
          },
          team_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/teams/:team_id/repos/:owner/:repo"
      },
      reviewProject: {
        headers: {
          accept: "application/vnd.github.inertia-preview+json"
        },
        method: "GET",
        params: {
          project_id: {
            required: !0,
            type: "integer"
          },
          team_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/teams/:team_id/projects/:project_id"
      },
      update: {
        method: "PATCH",
        params: {
          description: {
            type: "string"
          },
          name: {
            required: !0,
            type: "string"
          },
          parent_team_id: {
            type: "integer"
          },
          permission: {
            enum: ["pull", "push", "admin"],
            type: "string"
          },
          privacy: {
            type: "string"
          },
          team_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/teams/:team_id"
      },
      updateDiscussion: {
        headers: {
          accept: "application/vnd.github.echo-preview+json"
        },
        method: "PATCH",
        params: {
          body: {
            type: "string"
          },
          discussion_number: {
            required: !0,
            type: "integer"
          },
          team_id: {
            required: !0,
            type: "integer"
          },
          title: {
            type: "string"
          }
        },
        url: "/teams/:team_id/discussions/:discussion_number"
      },
      updateDiscussionComment: {
        headers: {
          accept: "application/vnd.github.echo-preview+json"
        },
        method: "PATCH",
        params: {
          body: {
            required: !0,
            type: "string"
          },
          comment_number: {
            required: !0,
            type: "integer"
          },
          discussion_number: {
            required: !0,
            type: "integer"
          },
          team_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/teams/:team_id/discussions/:discussion_number/comments/:comment_number"
      }
    },
    users: {
      addEmails: {
        method: "POST",
        params: {
          emails: {
            required: !0,
            type: "string[]"
          }
        },
        url: "/user/emails"
      },
      block: {
        method: "PUT",
        params: {
          username: {
            required: !0,
            type: "string"
          }
        },
        url: "/user/blocks/:username"
      },
      checkBlocked: {
        method: "GET",
        params: {
          username: {
            required: !0,
            type: "string"
          }
        },
        url: "/user/blocks/:username"
      },
      checkFollowing: {
        method: "GET",
        params: {
          username: {
            required: !0,
            type: "string"
          }
        },
        url: "/user/following/:username"
      },
      checkFollowingForUser: {
        method: "GET",
        params: {
          target_user: {
            required: !0,
            type: "string"
          },
          username: {
            required: !0,
            type: "string"
          }
        },
        url: "/users/:username/following/:target_user"
      },
      createGpgKey: {
        method: "POST",
        params: {
          armored_public_key: {
            type: "string"
          }
        },
        url: "/user/gpg_keys"
      },
      createPublicKey: {
        method: "POST",
        params: {
          key: {
            type: "string"
          },
          title: {
            type: "string"
          }
        },
        url: "/user/keys"
      },
      deleteEmails: {
        method: "DELETE",
        params: {
          emails: {
            required: !0,
            type: "string[]"
          }
        },
        url: "/user/emails"
      },
      deleteGpgKey: {
        method: "DELETE",
        params: {
          gpg_key_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/user/gpg_keys/:gpg_key_id"
      },
      deletePublicKey: {
        method: "DELETE",
        params: {
          key_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/user/keys/:key_id"
      },
      follow: {
        method: "PUT",
        params: {
          username: {
            required: !0,
            type: "string"
          }
        },
        url: "/user/following/:username"
      },
      getAuthenticated: {
        method: "GET",
        params: {},
        url: "/user"
      },
      getByUsername: {
        method: "GET",
        params: {
          username: {
            required: !0,
            type: "string"
          }
        },
        url: "/users/:username"
      },
      getContextForUser: {
        headers: {
          accept: "application/vnd.github.hagar-preview+json"
        },
        method: "GET",
        params: {
          subject_id: {
            type: "string"
          },
          subject_type: {
            enum: ["organization", "repository", "issue", "pull_request"],
            type: "string"
          },
          username: {
            required: !0,
            type: "string"
          }
        },
        url: "/users/:username/hovercard"
      },
      getGpgKey: {
        method: "GET",
        params: {
          gpg_key_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/user/gpg_keys/:gpg_key_id"
      },
      getPublicKey: {
        method: "GET",
        params: {
          key_id: {
            required: !0,
            type: "integer"
          }
        },
        url: "/user/keys/:key_id"
      },
      list: {
        method: "GET",
        params: {
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          since: {
            type: "string"
          }
        },
        url: "/users"
      },
      listBlocked: {
        method: "GET",
        params: {},
        url: "/user/blocks"
      },
      listEmails: {
        method: "GET",
        params: {
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          }
        },
        url: "/user/emails"
      },
      listFollowersForAuthenticatedUser: {
        method: "GET",
        params: {
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          }
        },
        url: "/user/followers"
      },
      listFollowersForUser: {
        method: "GET",
        params: {
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          username: {
            required: !0,
            type: "string"
          }
        },
        url: "/users/:username/followers"
      },
      listFollowingForAuthenticatedUser: {
        method: "GET",
        params: {
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          }
        },
        url: "/user/following"
      },
      listFollowingForUser: {
        method: "GET",
        params: {
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          username: {
            required: !0,
            type: "string"
          }
        },
        url: "/users/:username/following"
      },
      listGpgKeys: {
        method: "GET",
        params: {
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          }
        },
        url: "/user/gpg_keys"
      },
      listGpgKeysForUser: {
        method: "GET",
        params: {
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          username: {
            required: !0,
            type: "string"
          }
        },
        url: "/users/:username/gpg_keys"
      },
      listPublicEmails: {
        method: "GET",
        params: {
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          }
        },
        url: "/user/public_emails"
      },
      listPublicKeys: {
        method: "GET",
        params: {
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          }
        },
        url: "/user/keys"
      },
      listPublicKeysForUser: {
        method: "GET",
        params: {
          page: {
            type: "integer"
          },
          per_page: {
            type: "integer"
          },
          username: {
            required: !0,
            type: "string"
          }
        },
        url: "/users/:username/keys"
      },
      togglePrimaryEmailVisibility: {
        method: "PATCH",
        params: {
          email: {
            required: !0,
            type: "string"
          },
          visibility: {
            required: !0,
            type: "string"
          }
        },
        url: "/user/email/visibility"
      },
      unblock: {
        method: "DELETE",
        params: {
          username: {
            required: !0,
            type: "string"
          }
        },
        url: "/user/blocks/:username"
      },
      unfollow: {
        method: "DELETE",
        params: {
          username: {
            required: !0,
            type: "string"
          }
        },
        url: "/user/following/:username"
      },
      updateAuthenticated: {
        method: "PATCH",
        params: {
          bio: {
            type: "string"
          },
          blog: {
            type: "string"
          },
          company: {
            type: "string"
          },
          email: {
            type: "string"
          },
          hireable: {
            type: "boolean"
          },
          location: {
            type: "string"
          },
          name: {
            type: "string"
          }
        },
        url: "/user"
      }
    }
  };
}, function (e, r, t) {
  e.exports = function (e) {
    e.hook.before("request", i);
  };

  var i = t(64);
}, function (e, r, t) {
  "use strict";

  e.exports = function (e) {
    if (!e.request.validate) return;
    var r = e.request.validate;
    return Object.keys(r).forEach(function (t) {
      var o = n(r, t),
          p = o.type;
      var a,
          u,
          d = !0,
          g = !1;
      /\./.test(t) && (a = t.replace(/\.[^.]+$/, ""), (g = "[]" === a.slice(-2)) && (a = a.slice(0, -2)), u = n(e, a), d = "headers" === a || "object" == _typeof(u) && null !== u), (g ? (n(e, a) || []).map(function (e) {
        return e[t.split(/\./).pop()];
      }) : [n(e, t)]).forEach(function (r, n) {
        var a = void 0 !== r,
            u = null === r,
            c = g ? t.replace(/\[\]/, "[".concat(n, "]")) : t;

        if ((o.required || a) && d && (!o.allowNull || !u)) {
          if (!o.allowNull && u) throw new s("'".concat(c, "' cannot be null"), 400, null, e);
          if (o.required && !a) throw new s("Empty value for parameter '".concat(c, "': ").concat(JSON.stringify(r)), 400, null, e);

          if ("integer" === p) {
            var _t6 = r;
            if (r = parseInt(r, 10), isNaN(r)) throw new s("Invalid value for parameter '".concat(c, "': ").concat(JSON.stringify(_t6), " is NaN"), 400, null, e);
          }

          if (o.enum && -1 === o.enum.indexOf(r)) throw new s("Invalid value for parameter '".concat(c, "': ").concat(JSON.stringify(r)), 400, null, e);
          if (o.validation && !new RegExp(o.validation).test(r)) throw new s("Invalid value for parameter '".concat(c, "': ").concat(JSON.stringify(r)), 400, null, e);
          if ("object" === p && "string" == typeof r) try {
            r = JSON.parse(r);
          } catch (t) {
            throw new s("JSON parse error of value for parameter '".concat(c, "': ").concat(JSON.stringify(r)), 400, null, e);
          }
          i(e, o.mapTo || c, r);
        }
      });
    }), e;
  };

  var i = t(65),
      n = t(66),
      s = t(1);
}, function (e, r, t) {
  (function (r) {
    var t = "Expected a function",
        i = "__lodash_hash_undefined__",
        n = 1 / 0,
        s = 9007199254740991,
        o = "[object Function]",
        p = "[object GeneratorFunction]",
        a = "[object Symbol]",
        u = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
        d = /^\w*$/,
        g = /^\./,
        c = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,
        m = /\\(\\)?/g,
        l = /^\[object .+?Constructor\]$/,
        y = /^(?:0|[1-9]\d*)$/,
        h = "object" == _typeof(r) && r && r.Object === Object && r,
        q = "object" == (typeof self === "undefined" ? "undefined" : _typeof(self)) && self && self.Object === Object && self,
        b = h || q || Function("return this")();

    var _,
        w = Array.prototype,
        f = Function.prototype,
        v = Object.prototype,
        E = b["__core-js_shared__"],
        T = (_ = /[^.]+$/.exec(E && E.keys && E.keys.IE_PROTO || "")) ? "Symbol(src)_1." + _ : "",
        k = f.toString,
        j = v.hasOwnProperty,
        G = v.toString,
        P = RegExp("^" + k.call(j).replace(/[\\^$.*+?()[\]{}|]/g, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"),
        O = b.Symbol,
        S = w.splice,
        C = H(b, "Map"),
        x = H(Object, "create"),
        A = O ? O.prototype : void 0,
        R = A ? A.toString : void 0;

    function F(e) {
      var r = -1,
          t = e ? e.length : 0;

      for (this.clear(); ++r < t;) {
        var i = e[r];
        this.set(i[0], i[1]);
      }
    }

    function U(e) {
      var r = -1,
          t = e ? e.length : 0;

      for (this.clear(); ++r < t;) {
        var i = e[r];
        this.set(i[0], i[1]);
      }
    }

    function D(e) {
      var r = -1,
          t = e ? e.length : 0;

      for (this.clear(); ++r < t;) {
        var i = e[r];
        this.set(i[0], i[1]);
      }
    }

    function L(e, r, t) {
      var i = e[r];
      j.call(e, r) && J(i, t) && (void 0 !== t || r in e) || (e[r] = t);
    }

    function $(e, r) {
      for (var t = e.length; t--;) {
        if (J(e[t][0], r)) return t;
      }

      return -1;
    }

    function z(e) {
      return !(!W(e) || (r = e, T && T in r)) && (function (e) {
        var r = W(e) ? G.call(e) : "";
        return r == o || r == p;
      }(e) || function (e) {
        var r = !1;
        if (null != e && "function" != typeof e.toString) try {
          r = !!(e + "");
        } catch (e) {}
        return r;
      }(e) ? P : l).test(function (e) {
        if (null != e) {
          try {
            return k.call(e);
          } catch (e) {}

          try {
            return e + "";
          } catch (e) {}
        }

        return "";
      }(e));
      var r;
    }

    function I(e, r, t, i) {
      if (!W(e)) return e;

      for (var n = -1, s = (r = function (e, r) {
        if (Y(e)) return !1;

        var t = _typeof(e);

        if ("number" == t || "symbol" == t || "boolean" == t || null == e || Q(e)) return !0;
        return d.test(e) || !u.test(e) || null != r && (e in Object(r));
      }(r, e) ? [r] : function (e) {
        return Y(e) ? e : N(e);
      }(r)).length, o = s - 1, p = e; null != p && ++n < s;) {
        var a = K(r[n]),
            g = t;

        if (n != o) {
          var c = p[a];
          void 0 === (g = i ? i(c, a, p) : void 0) && (g = W(c) ? c : B(r[n + 1]) ? [] : {});
        }

        L(p, a, g), p = p[a];
      }

      return e;
    }

    function M(e, r) {
      var t,
          i,
          n = e.__data__;
      return ("string" == (i = _typeof(t = r)) || "number" == i || "symbol" == i || "boolean" == i ? "__proto__" !== t : null === t) ? n["string" == typeof r ? "string" : "hash"] : n.map;
    }

    function H(e, r) {
      var t = function (e, r) {
        return null == e ? void 0 : e[r];
      }(e, r);

      return z(t) ? t : void 0;
    }

    function B(e, r) {
      return !!(r = null == r ? s : r) && ("number" == typeof e || y.test(e)) && e > -1 && e % 1 == 0 && e < r;
    }

    F.prototype.clear = function () {
      this.__data__ = x ? x(null) : {};
    }, F.prototype.delete = function (e) {
      return this.has(e) && delete this.__data__[e];
    }, F.prototype.get = function (e) {
      var r = this.__data__;

      if (x) {
        var t = r[e];
        return t === i ? void 0 : t;
      }

      return j.call(r, e) ? r[e] : void 0;
    }, F.prototype.has = function (e) {
      var r = this.__data__;
      return x ? void 0 !== r[e] : j.call(r, e);
    }, F.prototype.set = function (e, r) {
      return this.__data__[e] = x && void 0 === r ? i : r, this;
    }, U.prototype.clear = function () {
      this.__data__ = [];
    }, U.prototype.delete = function (e) {
      var r = this.__data__,
          t = $(r, e);
      return !(t < 0 || (t == r.length - 1 ? r.pop() : S.call(r, t, 1), 0));
    }, U.prototype.get = function (e) {
      var r = this.__data__,
          t = $(r, e);
      return t < 0 ? void 0 : r[t][1];
    }, U.prototype.has = function (e) {
      return $(this.__data__, e) > -1;
    }, U.prototype.set = function (e, r) {
      var t = this.__data__,
          i = $(t, e);
      return i < 0 ? t.push([e, r]) : t[i][1] = r, this;
    }, D.prototype.clear = function () {
      this.__data__ = {
        hash: new F(),
        map: new (C || U)(),
        string: new F()
      };
    }, D.prototype.delete = function (e) {
      return M(this, e).delete(e);
    }, D.prototype.get = function (e) {
      return M(this, e).get(e);
    }, D.prototype.has = function (e) {
      return M(this, e).has(e);
    }, D.prototype.set = function (e, r) {
      return M(this, e).set(e, r), this;
    };
    var N = V(function (e) {
      var r;
      e = null == (r = e) ? "" : function (e) {
        if ("string" == typeof e) return e;
        if (Q(e)) return R ? R.call(e) : "";
        var r = e + "";
        return "0" == r && 1 / e == -n ? "-0" : r;
      }(r);
      var t = [];
      return g.test(e) && t.push(""), e.replace(c, function (e, r, i, n) {
        t.push(i ? n.replace(m, "$1") : r || e);
      }), t;
    });

    function K(e) {
      if ("string" == typeof e || Q(e)) return e;
      var r = e + "";
      return "0" == r && 1 / e == -n ? "-0" : r;
    }

    function V(e, r) {
      if ("function" != typeof e || r && "function" != typeof r) throw new TypeError(t);

      var i = function i() {
        var t = arguments,
            n = r ? r.apply(this, t) : t[0],
            s = i.cache;
        if (s.has(n)) return s.get(n);
        var o = e.apply(this, t);
        return i.cache = s.set(n, o), o;
      };

      return i.cache = new (V.Cache || D)(), i;
    }

    function J(e, r) {
      return e === r || e != e && r != r;
    }

    V.Cache = D;
    var Y = Array.isArray;

    function W(e) {
      var r = _typeof(e);

      return !!e && ("object" == r || "function" == r);
    }

    function Q(e) {
      return "symbol" == _typeof(e) || function (e) {
        return !!e && "object" == _typeof(e);
      }(e) && G.call(e) == a;
    }

    e.exports = function (e, r, t) {
      return null == e ? e : I(e, r, t);
    };
  }).call(this, t(7));
}, function (e, r, t) {
  (function (r) {
    var t = "Expected a function",
        i = "__lodash_hash_undefined__",
        n = 1 / 0,
        s = "[object Function]",
        o = "[object GeneratorFunction]",
        p = "[object Symbol]",
        a = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
        u = /^\w*$/,
        d = /^\./,
        g = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,
        c = /\\(\\)?/g,
        m = /^\[object .+?Constructor\]$/,
        l = "object" == _typeof(r) && r && r.Object === Object && r,
        y = "object" == (typeof self === "undefined" ? "undefined" : _typeof(self)) && self && self.Object === Object && self,
        h = l || y || Function("return this")();
    var q,
        b = Array.prototype,
        _ = Function.prototype,
        w = Object.prototype,
        f = h["__core-js_shared__"],
        v = (q = /[^.]+$/.exec(f && f.keys && f.keys.IE_PROTO || "")) ? "Symbol(src)_1." + q : "",
        E = _.toString,
        T = w.hasOwnProperty,
        k = w.toString,
        j = RegExp("^" + E.call(T).replace(/[\\^$.*+?()[\]{}|]/g, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"),
        G = h.Symbol,
        P = b.splice,
        O = z(h, "Map"),
        S = z(Object, "create"),
        C = G ? G.prototype : void 0,
        x = C ? C.toString : void 0;

    function A(e) {
      var r = -1,
          t = e ? e.length : 0;

      for (this.clear(); ++r < t;) {
        var i = e[r];
        this.set(i[0], i[1]);
      }
    }

    function R(e) {
      var r = -1,
          t = e ? e.length : 0;

      for (this.clear(); ++r < t;) {
        var i = e[r];
        this.set(i[0], i[1]);
      }
    }

    function F(e) {
      var r = -1,
          t = e ? e.length : 0;

      for (this.clear(); ++r < t;) {
        var i = e[r];
        this.set(i[0], i[1]);
      }
    }

    function U(e, r) {
      for (var t, i, n = e.length; n--;) {
        if ((t = e[n][0]) === (i = r) || t != t && i != i) return n;
      }

      return -1;
    }

    function D(e, r) {
      for (var t, i = 0, n = (r = function (e, r) {
        if (B(e)) return !1;

        var t = _typeof(e);

        if ("number" == t || "symbol" == t || "boolean" == t || null == e || K(e)) return !0;
        return u.test(e) || !a.test(e) || null != r && (e in Object(r));
      }(r, e) ? [r] : B(t = r) ? t : I(t)).length; null != e && i < n;) {
        e = e[M(r[i++])];
      }

      return i && i == n ? e : void 0;
    }

    function L(e) {
      return !(!N(e) || (r = e, v && v in r)) && (function (e) {
        var r = N(e) ? k.call(e) : "";
        return r == s || r == o;
      }(e) || function (e) {
        var r = !1;
        if (null != e && "function" != typeof e.toString) try {
          r = !!(e + "");
        } catch (e) {}
        return r;
      }(e) ? j : m).test(function (e) {
        if (null != e) {
          try {
            return E.call(e);
          } catch (e) {}

          try {
            return e + "";
          } catch (e) {}
        }

        return "";
      }(e));
      var r;
    }

    function $(e, r) {
      var t,
          i,
          n = e.__data__;
      return ("string" == (i = _typeof(t = r)) || "number" == i || "symbol" == i || "boolean" == i ? "__proto__" !== t : null === t) ? n["string" == typeof r ? "string" : "hash"] : n.map;
    }

    function z(e, r) {
      var t = function (e, r) {
        return null == e ? void 0 : e[r];
      }(e, r);

      return L(t) ? t : void 0;
    }

    A.prototype.clear = function () {
      this.__data__ = S ? S(null) : {};
    }, A.prototype.delete = function (e) {
      return this.has(e) && delete this.__data__[e];
    }, A.prototype.get = function (e) {
      var r = this.__data__;

      if (S) {
        var t = r[e];
        return t === i ? void 0 : t;
      }

      return T.call(r, e) ? r[e] : void 0;
    }, A.prototype.has = function (e) {
      var r = this.__data__;
      return S ? void 0 !== r[e] : T.call(r, e);
    }, A.prototype.set = function (e, r) {
      return this.__data__[e] = S && void 0 === r ? i : r, this;
    }, R.prototype.clear = function () {
      this.__data__ = [];
    }, R.prototype.delete = function (e) {
      var r = this.__data__,
          t = U(r, e);
      return !(t < 0 || (t == r.length - 1 ? r.pop() : P.call(r, t, 1), 0));
    }, R.prototype.get = function (e) {
      var r = this.__data__,
          t = U(r, e);
      return t < 0 ? void 0 : r[t][1];
    }, R.prototype.has = function (e) {
      return U(this.__data__, e) > -1;
    }, R.prototype.set = function (e, r) {
      var t = this.__data__,
          i = U(t, e);
      return i < 0 ? t.push([e, r]) : t[i][1] = r, this;
    }, F.prototype.clear = function () {
      this.__data__ = {
        hash: new A(),
        map: new (O || R)(),
        string: new A()
      };
    }, F.prototype.delete = function (e) {
      return $(this, e).delete(e);
    }, F.prototype.get = function (e) {
      return $(this, e).get(e);
    }, F.prototype.has = function (e) {
      return $(this, e).has(e);
    }, F.prototype.set = function (e, r) {
      return $(this, e).set(e, r), this;
    };
    var I = H(function (e) {
      var r;
      e = null == (r = e) ? "" : function (e) {
        if ("string" == typeof e) return e;
        if (K(e)) return x ? x.call(e) : "";
        var r = e + "";
        return "0" == r && 1 / e == -n ? "-0" : r;
      }(r);
      var t = [];
      return d.test(e) && t.push(""), e.replace(g, function (e, r, i, n) {
        t.push(i ? n.replace(c, "$1") : r || e);
      }), t;
    });

    function M(e) {
      if ("string" == typeof e || K(e)) return e;
      var r = e + "";
      return "0" == r && 1 / e == -n ? "-0" : r;
    }

    function H(e, r) {
      if ("function" != typeof e || r && "function" != typeof r) throw new TypeError(t);

      var i = function i() {
        var t = arguments,
            n = r ? r.apply(this, t) : t[0],
            s = i.cache;
        if (s.has(n)) return s.get(n);
        var o = e.apply(this, t);
        return i.cache = s.set(n, o), o;
      };

      return i.cache = new (H.Cache || F)(), i;
    }

    H.Cache = F;
    var B = Array.isArray;

    function N(e) {
      var r = _typeof(e);

      return !!e && ("object" == r || "function" == r);
    }

    function K(e) {
      return "symbol" == _typeof(e) || function (e) {
        return !!e && "object" == _typeof(e);
      }(e) && k.call(e) == p;
    }

    e.exports = function (e, r, t) {
      var i = null == e ? void 0 : D(e, r);
      return void 0 === i ? t : i;
    };
  }).call(this, t(7));
}, function (e, r, t) {
  e.exports = function (e) {
    e.getFirstPage = t(68).bind(null, e), e.getLastPage = t(70).bind(null, e), e.getNextPage = t(71).bind(null, e), e.getPreviousPage = t(72).bind(null, e), e.hasFirstPage = t(73), e.hasLastPage = t(74), e.hasNextPage = t(75), e.hasPreviousPage = t(76);
  };
}, function (e, r, t) {
  e.exports = function (e, r, t) {
    return i(e, r, "first", t);
  };

  var i = t(5);
}, function (e, r) {
  e.exports =
  /*#__PURE__*/
  function (_Error3) {
    _inherits(_class3, _Error3);

    function _class3(e, r, t) {
      var _this3;

      _classCallCheck(this, _class3);

      _this3 = _possibleConstructorReturn(this, _getPrototypeOf(_class3).call(this, e)), Error.captureStackTrace && Error.captureStackTrace(_assertThisInitialized(_assertThisInitialized(_this3)), _this3.constructor), _this3.name = "HttpError", _this3.code = r, _this3.headers = t;
      return _this3;
    }

    return _class3;
  }(_wrapNativeSuper(Error));
}, function (e, r, t) {
  e.exports = function (e, r, t) {
    return i(e, r, "last", t);
  };

  var i = t(5);
}, function (e, r, t) {
  e.exports = function (e, r, t) {
    return i(e, r, "next", t);
  };

  var i = t(5);
}, function (e, r, t) {
  e.exports = function (e, r, t) {
    return i(e, r, "prev", t);
  };

  var i = t(5);
}, function (e, r, t) {
  e.exports = function (e) {
    return i("octokit.hasFirstPage() – You can use octokit.paginate or async iterators instead: https://github.com/octokit/rest.js#pagination."), n(e).first;
  };

  var i = t(3),
      n = t(4);
}, function (e, r, t) {
  e.exports = function (e) {
    return i("octokit.hasLastPage() – You can use octokit.paginate or async iterators instead: https://github.com/octokit/rest.js#pagination."), n(e).last;
  };

  var i = t(3),
      n = t(4);
}, function (e, r, t) {
  e.exports = function (e) {
    return i("octokit.hasNextPage() – You can use octokit.paginate or async iterators instead: https://github.com/octokit/rest.js#pagination."), n(e).next;
  };

  var i = t(3),
      n = t(4);
}, function (e, r, t) {
  e.exports = function (e) {
    return i("octokit.hasPreviousPage() – You can use octokit.paginate or async iterators instead: https://github.com/octokit/rest.js#pagination."), n(e).prev;
  };

  var i = t(3),
      n = t(4);
}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
